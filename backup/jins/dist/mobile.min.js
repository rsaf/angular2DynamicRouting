/// <reference path="../../App.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var intro;
(function (intro) {
    var Bg = (function (_super) {
        __extends(Bg, _super);
        function Bg() {
            var _this = this;
            var withoutBalloons = PIXI.Texture.fromFrame("bg.png");
            var withBalloons = PIXI.Texture.fromFrame("bg.jpg");
            if (App.isShared) {
                _super.call(this, withoutBalloons);
            }
            else {
                _super.call(this, withBalloons);
            }
            App.EventState.on(function (aState) {
                switch (aState) {
                    case STATE.PLAY:
                        _this.texture = withoutBalloons;
                        break;
                }
            });
        }
        Object.defineProperty(Bg, "Instance", {
            get: function () {
                if (!Bg._Instance) {
                    Bg._Instance = new Bg();
                }
                return Bg._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Bg.prototype.show = function () {
            var _this = this;
        };
        return Bg;
    })(PIXI.Sprite);
    intro.Bg = Bg;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var StartBtn = (function (_super) {
        __extends(StartBtn, _super);
        function StartBtn() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame("Start.png"));
            this.x = (App.width - this.width) / 2;
            this.y = App.height - this.height;
            this.alpha = 0;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
            _this.show();
        }
        Object.defineProperty(StartBtn, "Instance", {
            get: function () {
                if (!StartBtn._Instance) {
                    StartBtn._Instance = new StartBtn();
                }
                return StartBtn._Instance;
            },
            enumerable: true,
            configurable: true
        });
        StartBtn.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 0.5, {
                alpha: 1,
                y: App.height - _this.height - 100
            });
        };
        StartBtn.prototype.animate = function () {
            TweenMax.to(this, 1, {
                y: App.height
            });
        };
        StartBtn.prototype.tapped = function () {
            App.play();
        };
        return StartBtn;
    })(PIXI.Sprite);
    intro.StartBtn = StartBtn;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
/// <reference path="Intro.ts" />
var intro;
(function (intro) {
    var RuleBtn = (function (_super) {
        __extends(RuleBtn, _super);
        function RuleBtn() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame("Rule.png"));
            this.x = (App.width - this.width) / 2;
            this.y = App.height;
            this.alpha = 0;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
            _this.show();
        }
        Object.defineProperty(RuleBtn, "Instance", {
            get: function () {
                if (!RuleBtn._Instance) {
                    RuleBtn._Instance = new RuleBtn();
                }
                return RuleBtn._Instance;
            },
            enumerable: true,
            configurable: true
        });
        RuleBtn.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 0.5, {
                alpha: 1,
                y: App.height - _this.height - 50
            });
        };
        RuleBtn.prototype.animate = function () {
            TweenMax.to(this, 1, {
                y: App.height
            });
        };
        RuleBtn.prototype.tapped = function () {
            intro.popup.popUpBg.Instance.fnShow();
            intro.popup.RuleCopy.Instance.fnShow();
        };
        return RuleBtn;
    })(PIXI.Sprite);
    intro.RuleBtn = RuleBtn;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var MusicBtn = (function (_super) {
        __extends(MusicBtn, _super);
        function MusicBtn() {
            var _this = this;
            this.textureOn = PIXI.Texture.fromFrame("Music.png");
            this.textureOff = PIXI.Texture.fromFrame("MusicOff.png");
            _super.call(this, this.textureOn);
            this.x = App.width - this.width - 20;
            this.y = 10;
            this.musicOn = true;
            this.buttonMode = this.interactive = true;
            this.on("click", this.fnTap).on("tap", this.fnTap);
        }
        Object.defineProperty(MusicBtn, "Instance", {
            get: function () {
                if (!MusicBtn._Instance) {
                    MusicBtn._Instance = new MusicBtn();
                }
                return MusicBtn._Instance;
            },
            enumerable: true,
            configurable: true
        });
        MusicBtn.prototype.fnActive = function () {
            this.visible = true;
            if (!this.interactive) {
                this.buttonMode = this.interactive = true;
                this.on("click", this.fnTap).on("tap", this.fnTap);
            }
        };
        MusicBtn.prototype.fnTap = function () {
            this.musicOn = !this.musicOn;
            if (this.musicOn) {
                createjs.Sound.play("Music", createjs.Sound.INTERRUPT_ANY, 0, 0, -1, .1);
                this.texture = this.textureOn;
            }
            else {
                this.texture = this.textureOff;
                createjs.Sound.stop();
            }
        };
        MusicBtn.prototype.animate = function () {
            TweenMax.to(this, 0.5, {
                x: App.width
            });
        };
        return MusicBtn;
    })(PIXI.Sprite);
    intro.MusicBtn = MusicBtn;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var Logo = (function (_super) {
        __extends(Logo, _super);
        function Logo() {
            _super.call(this, PIXI.Texture.fromFrame("Logo.png"));
            this.x = 5;
            this.y = 0;
            this.alpha = 0;
            var _this = this;
            setTimeout(function () {
                _this.show();
            }, 1000);
        }
        Object.defineProperty(Logo, "Instance", {
            get: function () {
                if (!Logo._Instance) {
                    Logo._Instance = new Logo();
                }
                return Logo._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Logo.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                y: 20
            });
        };
        Logo.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return Logo;
    })(PIXI.Sprite);
    intro.Logo = Logo;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var IntroMe = (function (_super) {
        __extends(IntroMe, _super);
        function IntroMe() {
            _super.call(this, PIXI.Texture.fromFrame("IntroMe.png"));
            this.x = App.width - this.width - 100;
            this.y = 400;
            this.alpha = 0;
            var _this = this;
            _this.show();
        }
        Object.defineProperty(IntroMe, "Instance", {
            get: function () {
                if (!IntroMe._Instance) {
                    IntroMe._Instance = new IntroMe();
                }
                return IntroMe._Instance;
            },
            enumerable: true,
            configurable: true
        });
        IntroMe.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                y: 250
            });
        };
        IntroMe.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return IntroMe;
    })(PIXI.Sprite);
    intro.IntroMe = IntroMe;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var IntroNew = (function (_super) {
        __extends(IntroNew, _super);
        function IntroNew(x, y, rotate) {
            _super.call(this, PIXI.Texture.fromFrame("IntroNew.png"));
            this.x = x;
            this.y = y;
            if (rotate) {
                this.rotation += 0.17;
            }
            this.alpha = 0;
            var _this = this;
            _this.show();
        }
        IntroNew.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                x: this.x + 130
            });
        };
        IntroNew.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return IntroNew;
    })(PIXI.Sprite);
    intro.IntroNew = IntroNew;
})(intro || (intro = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var IntroWish = (function (_super) {
        __extends(IntroWish, _super);
        function IntroWish() {
            _super.call(this, PIXI.Texture.fromFrame("IntroWish.png"));
            this.x = App.width - this.width - 100;
            this.y = 0;
            this.alpha = 0;
            var _this = this;
            _this.show();
        }
        Object.defineProperty(IntroWish, "Instance", {
            get: function () {
                if (!IntroWish._Instance) {
                    IntroWish._Instance = new IntroWish();
                }
                return IntroWish._Instance;
            },
            enumerable: true,
            configurable: true
        });
        IntroWish.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                y: 480
            });
        };
        IntroWish.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return IntroWish;
    })(PIXI.Sprite);
    intro.IntroWish = IntroWish;
})(intro || (intro = {}));
/// <reference path="IntroMe.ts" />
/// <reference path="IntroNew.ts" />
/// <reference path="IntroWish.ts" />
var intro;
(function (intro) {
    var IntroTextHolder = (function (_super) {
        __extends(IntroTextHolder, _super);
        function IntroTextHolder() {
            _super.call(this);
            var _this = this;
            this.addChild(new intro.IntroNew(0, 150, false));
            this.addChild(intro.IntroMe.Instance);
            this.addChild(new intro.IntroNew(0, 330, true));
            this.addChild(intro.IntroWish.Instance);
        }
        Object.defineProperty(IntroTextHolder, "Instance", {
            get: function () {
                if (!IntroTextHolder._Instance) {
                    IntroTextHolder._Instance = new IntroTextHolder();
                }
                return IntroTextHolder._Instance;
            },
            enumerable: true,
            configurable: true
        });
        IntroTextHolder.duration = 8;
        return IntroTextHolder;
    })(PIXI.Container);
    intro.IntroTextHolder = IntroTextHolder;
})(intro || (intro = {}));
/// <reference path="../../../App.ts" />
/// <reference path="../Intro.ts" />
var intro;
(function (intro) {
    var popup;
    (function (popup) {
        var popUpBg = (function (_super) {
            __extends(popUpBg, _super);
            function popUpBg() {
                _super.call(this);
                this.beginFill(0, 0.6);
                this.drawRect(0, 0, App.width, App.height);
                this.endFill;
                this.visible = false;
                this.buttonMode = this.interactive = true;
                this.on("click", this.fnTap).on("tap", this.fnTap).on("mousedown", this.fnHigh).on("touchstart", this.fnHigh).on("mouseup", this.fnNormal).on("touchend", this.fnNormal).on("mouseupoutside", this.fnNormal).on("touchendoutside", this.fnNormal);
                this.alpha = 0;
            }
            Object.defineProperty(popUpBg, "Instance", {
                get: function () {
                    if (!popUpBg._Instance) {
                        popUpBg._Instance = new popUpBg();
                    }
                    return popUpBg._Instance;
                },
                enumerable: true,
                configurable: true
            });
            popUpBg.prototype.fnHigh = function () {
            };
            popUpBg.prototype.fnNormal = function () {
            };
            popUpBg.prototype.fnShow = function () {
                this.visible = true;
                TweenMax.to(this, 0.6, {
                    alpha: 0.9
                });
            };
            popUpBg.prototype.fnTap = function () {
                this.visible = false;
                TweenMax.to(this, 0.6, {
                    alpha: 0
                });
                intro.popup.RuleCopy.Instance.fnHide();
            };
            return popUpBg;
        })(PIXI.Graphics);
        popup.popUpBg = popUpBg;
    })(popup = intro.popup || (intro.popup = {}));
})(intro || (intro = {}));
/// <reference path="../../../App.ts" />
/// <reference path="../Intro.ts" />
var intro;
(function (intro) {
    var popup;
    (function (popup) {
        var RuleCopy = (function (_super) {
            __extends(RuleCopy, _super);
            function RuleCopy() {
                _super.call(this, PIXI.Texture.fromFrame("RuleCopy.png"));
                this.x = (App.width - this.width) / 2;
                this.y = (App.height - this.height) / 2;
                this.visible = false;
            }
            Object.defineProperty(RuleCopy, "Instance", {
                get: function () {
                    if (!RuleCopy._Instance) {
                        RuleCopy._Instance = new RuleCopy();
                    }
                    return RuleCopy._Instance;
                },
                enumerable: true,
                configurable: true
            });
            RuleCopy.prototype.fnShow = function () {
                this.visible = true;
            };
            RuleCopy.prototype.fnHide = function () {
                this.visible = false;
            };
            return RuleCopy;
        })(PIXI.Sprite);
        popup.RuleCopy = RuleCopy;
    })(popup = intro.popup || (intro.popup = {}));
})(intro || (intro = {}));
/// <reference path="Bg.ts" />
/// <reference path="StartBtn.ts" />
/// <reference path="RuleBtn.ts" />
/// <reference path="MusicBtn.ts" />
/// <reference path="Logo.ts" />
/// <reference path="IntroTextHolder.ts" />
/// <reference path="popUp/popUpBg.ts" />
/// <reference path="popUp/rulecopy.ts" />
var intro;
(function (intro) {
    var Intro = (function (_super) {
        __extends(Intro, _super);
        function Intro() {
            _super.call(this);
            var _this = this;
            this.addChild(intro.Logo.Instance);
            this.addChild(intro.MusicBtn.Instance);
            // if(App.isShared){
            // 	this.fnShowAlreadyPlayed();
            // }
            // else{
            // 	this.fnShowIntro();
            // }	
            this.addChild(intro.StartBtn.Instance);
            this.addChild(intro.RuleBtn.Instance);
            this.addChild(intro.IntroTextHolder.Instance);
            this.addChild(intro.popup.popUpBg.Instance);
            this.addChild(intro.popup.RuleCopy.Instance);
            App.EventState.on(function (aState) {
                _this.hide();
                switch (aState) {
                    case STATE.INTRO:
                        _this.show();
                        break;
                }
            });
        }
        Object.defineProperty(Intro, "Instance", {
            get: function () {
                if (!Intro._Instance) {
                    Intro._Instance = new Intro();
                }
                return Intro._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Intro.prototype.show = function () {
            console.log('show intro');
            this.visible = true;
        };
        Intro.prototype.hide = function () {
            this.visible = false;
        };
        Intro.duration = 8;
        return Intro;
    })(PIXI.Container);
    intro.Intro = Intro;
})(intro || (intro = {}));
/// <reference path="MyPage.ts" />
var mypage;
(function (mypage) {
    var RedBalloon = (function (_super) {
        __extends(RedBalloon, _super);
        function RedBalloon(id) {
            if (id === void 0) { id = 1; }
            var _this = this;
            _super.call(this, PIXI.Texture.fromImage('RedBalloon1.png'));
            this.setPosition(id);
        }
        RedBalloon.prototype.setPosition = function (id) {
            var isIphone4 = false;
            if ((App.height / App.width) <= 1.5) {
                this.width = this.width - 30;
                this.height = this.height - 70;
                isIphone4 = true;
            }
            if (id % 2) {
                this.x = 80;
                if (id != 1 && id != 5) {
                    this.y = 805;
                }
                else {
                    this.y = 620;
                }
            }
            else {
                this.x = App.width - this.width - 80;
                if (id != 2 && id != 6) {
                    this.y = 805;
                }
                else {
                    this.y = 620;
                }
            }
        };
        return RedBalloon;
    })(PIXI.Sprite);
    mypage.RedBalloon = RedBalloon;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
var mypage;
(function (mypage) {
    var WishTextContainer = (function (_super) {
        __extends(WishTextContainer, _super);
        function WishTextContainer(id) {
            if (id === void 0) { id = 1; }
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('WishText.png'));
            this.x = 140;
        }
        Object.defineProperty(WishTextContainer, "Instance", {
            get: function () {
                if (!WishTextContainer._Instance) {
                    WishTextContainer._Instance = new WishTextContainer();
                }
                return WishTextContainer._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return WishTextContainer;
    })(PIXI.Sprite);
    mypage.WishTextContainer = WishTextContainer;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
var mypage;
(function (mypage) {
    var WishText = (function (_super) {
        __extends(WishText, _super);
        function WishText(text) {
            if (text === void 0) { text = ''; }
            var _this = this;
            _super.call(this, this.processText(text), { align: 'center', lineHeight: 45, font: "bold 30px Aria" });
            this.x = 170;
            this.y = 260;
            this.updatePosition(text);
        }
        WishText.prototype.processText = function (text) {
            var result = text;
            if (text.length > WishText.textWidth) {
                result = ' ';
                var i = 0;
                var j = WishText.textWidth;
                var temp;
                while (true) {
                    result = result + text.slice(i, j) + '\n ';
                    i = j;
                    temp = j + WishText.textWidth;
                    if (text[temp]) {
                        j = temp;
                    }
                    else {
                        j = text.length;
                        result = result + text.slice(i, j) + '\n ';
                        break;
                    }
                }
            }
            return result;
        };
        WishText.prototype.updatePosition = function (text) {
            if (text.length < WishText.textWidth) {
                this.x = 185;
                this.y = 270;
            }
            else if (text.length == WishText.textWidth) {
                this.y = 270;
            }
            else if (text.length > 2 * WishText.textWidth) {
                this.y = 230;
                this.x = 180;
            }
        };
        WishText.textWidth = 8;
        return WishText;
    })(PIXI.Text);
    mypage.WishText = WishText;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
/// <reference path="WishTextContainer.ts" />
/// <reference path="WishText.ts" />
var mypage;
(function (mypage) {
    var Wish = (function (_super) {
        __extends(Wish, _super);
        function Wish() {
            var _this = this;
            _super.call(this);
            this.addChild(mypage.WishTextContainer.Instance);
            this.addChild(new mypage.WishText(App.userBalloons[0].message));
            this.y = (App.height - this.height) / 2 + 100;
        }
        Object.defineProperty(Wish, "Instance", {
            get: function () {
                if (!Wish._Instance) {
                    Wish._Instance = new Wish();
                }
                return Wish._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Wish;
    })(PIXI.Container);
    mypage.Wish = Wish;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
var mypage;
(function (mypage) {
    var Balloon = (function (_super) {
        __extends(Balloon, _super);
        function Balloon(id) {
            if (id === void 0) { id = 1; }
            // var _this = this;
            console.log('ballooon', id);
            _super.call(this, PIXI.Texture.fromFrame('Balloon' + id + '.png'));
            this.x = (App.width - this.width) / 2;
            this.y = (App.height - this.height) / 2 - 250;
        }
        return Balloon;
    })(PIXI.Sprite);
    mypage.Balloon = Balloon;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
/// <reference path="RedBalloon.ts" />
/// <reference path="Wish.ts" />
/// <reference path="Balloon.ts" />
var mypage;
(function (mypage) {
    var AlreadyPlayed = (function (_super) {
        __extends(AlreadyPlayed, _super);
        function AlreadyPlayed() {
            _super.call(this);
            var _this = this;
            var i = -1;
            var j = -1;
            while (++i < App.userSupport) {
                this.addChild(new mypage.RedBalloon(i));
                if (i == 3)
                    break; // maximum of 4 red balloons
            }
            // App.userBalloons = ['1', '2', '4', '6']; //@todo removeMe.
            // console.log(App.userBalloons);
            // while (++j < App.userBalloons.length) {
            // 	// console.log(App.userBalloons[j].balloon_id);
            // 	this.addChild(new Balloon(parseInt(App.userBalloons[j].balloon_id)));
            // 	if (j == 1) break;  // 3 balloon + 1 added bellow.
            // }
            this.addChild(new play.ShootBalloon(App.userBalloons[0].balloon_id || 1));
            this.addChild(mypage.Wish.Instance);
        }
        Object.defineProperty(AlreadyPlayed, "Instance", {
            get: function () {
                if (!AlreadyPlayed._Instance) {
                    AlreadyPlayed._Instance = new AlreadyPlayed();
                }
                return AlreadyPlayed._Instance;
            },
            enumerable: true,
            configurable: true
        });
        AlreadyPlayed.duration = 8;
        return AlreadyPlayed;
    })(PIXI.Container);
    mypage.AlreadyPlayed = AlreadyPlayed;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
var mypage;
(function (mypage) {
    var WannaPlay = (function (_super) {
        __extends(WannaPlay, _super);
        function WannaPlay() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame("WannaPlay.png"));
            this.width = this.width - 80;
            this.height = this.height - 50;
            this.x = (App.width - this.width) / 2;
            this.y = App.height - this.height - 50;
            this.alpha = 0;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
            setTimeout(function () {
                _this.show();
            }, 1000);
        }
        Object.defineProperty(WannaPlay, "Instance", {
            get: function () {
                if (!WannaPlay._Instance) {
                    WannaPlay._Instance = new WannaPlay();
                }
                return WannaPlay._Instance;
            },
            enumerable: true,
            configurable: true
        });
        WannaPlay.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 0.5, {
                alpha: 1,
                y: App.height - _this.height - 10
            });
        };
        WannaPlay.prototype.animate = function () {
            TweenMax.to(this, 1, {
                y: App.height
            });
        };
        WannaPlay.prototype.tapped = function () {
            App.intro();
        };
        return WannaPlay;
    })(PIXI.Sprite);
    mypage.WannaPlay = WannaPlay;
})(mypage || (mypage = {}));
/// <reference path="MyPage.ts" />
var mypage;
(function (mypage) {
    var Avatar = (function (_super) {
        __extends(Avatar, _super);
        function Avatar() {
            // console.log('/' + $('meta[name="avatar"]').attr('content'));
            _super.call(this, PIXI.Texture.fromImage('/' + App.userAvatar));
            // alert(App.userAvatar);
            var mask = new PIXI.Graphics();
            mask.beginFill(0);
            mask.drawCircle(this.width / 2, this.width / 2, this.width / 2);
            mask.endFill;
            this.addChild(mask);
            this.mask = mask;
            this.width = 200;
            this.height = 200;
            this.x = App.width / 2;
            this.y = (App.height - this.height) / 2;
        }
        Object.defineProperty(Avatar, "Instance", {
            get: function () {
                if (!Avatar._Instance) {
                    Avatar._Instance = new Avatar();
                }
                return Avatar._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Avatar;
    })(PIXI.Sprite);
    mypage.Avatar = Avatar;
})(mypage || (mypage = {}));
/// <reference path="../Game.ts" />
/// <reference path="AlreadyPlayed.ts" />
/// <reference path="WannaPlay.ts" />
/// <reference path="Avatar.ts" />
var mypage;
(function (mypage) {
    var MyPage = (function (_super) {
        __extends(MyPage, _super);
        function MyPage() {
            _super.call(this);
            var _this = this;
            App.EventState.on(function (aState) {
                _this.hide();
                switch (aState) {
                    case STATE.MYPAGE:
                        _this.show();
                        break;
                }
            });
        }
        Object.defineProperty(MyPage, "Instance", {
            get: function () {
                if (!MyPage._Instance) {
                    MyPage._Instance = new MyPage();
                }
                return MyPage._Instance;
            },
            enumerable: true,
            configurable: true
        });
        MyPage.prototype.hide = function () {
            this.visible = false;
            jQuery('#userStats').fadeOut('fast');
        };
        MyPage.prototype.show = function () {
            this.addChild(mypage.AlreadyPlayed.Instance);
            this.addChild(mypage.WannaPlay.Instance);
            this.addChild(mypage.Avatar.Instance);
            setTimeout(function () { jQuery('#userStats').fadeIn(1500); }, 500);
            this.visible = true;
        };
        MyPage.prototype.fnShowMyPage = function () {
            // this.addChild(intro.StartBtn.Instance);
            // this.addChild(intro.RuleBtn.Instance);
            // this.addChild(intro.MyPageTextHolder.Instance);
        };
        MyPage.duration = 8;
        return MyPage;
    })(PIXI.Container);
    mypage.MyPage = MyPage;
})(mypage || (mypage = {}));
/// <reference path="../App.ts" />
/// <reference path="intro/Intro.ts" />
/// <reference path="play/Play.ts" />
/// <reference path="over/Over.ts" />
/// <reference path="mypage/MyPage.ts" />
var Game = (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = this;
        _super.call(this);
        this.addChild(intro.Bg.Instance);
        Game.state = new LiteEvent();
        this.gameInit();
    }
    Object.defineProperty(Game, "Instance", {
        get: function () {
            if (!Game._Instance) {
                Game._Instance = new Game();
            }
            return Game._Instance;
        },
        enumerable: true,
        configurable: true
    });
    Game.prototype.gameInit = function () {
        this.addChild(intro.Intro.Instance);
        this.addChild(play.Play.Instance);
        this.addChild(over.Over.Instance);
        this.addChild(mypage.MyPage.Instance);
    };
    return Game;
})(PIXI.Container);
/// <reference path="../../Game.ts" />
var play;
(function (play) {
    var BalloonHolder = (function (_super) {
        __extends(BalloonHolder, _super);
        function BalloonHolder(id) {
            var _this = this;
            _super.call(this, PIXI.Texture.fromImage('BalloonHolder' + id + '.png'));
            this.setPosition(id);
            this.bid = id;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
        }
        BalloonHolder.prototype.setPosition = function (id) {
            var isIphone4 = false;
            if ((App.height / App.width) <= 1.5) {
                this.width = this.width - 30;
                this.height = this.height - 70;
                isIphone4 = true;
            }
            if (id % 2) {
                this.x = 20;
                if (id != 1 && id != 5) {
                    if (isIphone4) {
                        this.y = 550;
                    }
                    else {
                        this.y = 605;
                    }
                }
                else {
                    this.y = 120;
                }
            }
            else {
                this.x = App.width - this.width - 20;
                if (id != 2 && id != 6) {
                    if (isIphone4) {
                        this.y = 550;
                    }
                    else {
                        this.y = 605;
                    }
                }
                else {
                    this.y = 120;
                }
            }
        };
        BalloonHolder.prototype.tapped = function () {
            play.Play.state.trigger({ state: PLAYSTATE.BALLOON, id: this.bid });
        };
        return BalloonHolder;
    })(PIXI.Sprite);
    play.BalloonHolder = BalloonHolder;
})(play || (play = {}));
/// <reference path="../../Game.ts" />
var play;
(function (play) {
    var Balloon = (function (_super) {
        __extends(Balloon, _super);
        function Balloon(id, intro, custom) {
            if (id === void 0) { id = 1; }
            if (intro === void 0) { intro = false; }
            if (custom === void 0) { custom = false; }
            var _this = this;
            _super.call(this, PIXI.Texture.fromImage('Balloon' + id + '.png'));
            this.setPosition(id, intro, custom);
        }
        Balloon.prototype.setPosition = function (id, intro, custom) {
            var isIphone4 = false;
            if (intro) {
                if ((App.height / App.width) <= 1.5) {
                    this.width = this.width - 140;
                    this.height = this.height - 190;
                    isIphone4 = true;
                }
                else {
                    this.width = this.width - 85;
                    this.height = this.height - 100;
                }
                if (id % 2) {
                    this.x = 90;
                    if (id != 1 && id != 5) {
                        if (isIphone4) {
                            this.y = 300;
                        }
                        else {
                            this.y = 365;
                        }
                    }
                    else {
                        this.y = 100;
                    }
                }
                else {
                    this.x = App.width - this.width - 90;
                    if (id != 2 && id != 6) {
                        if (isIphone4) {
                            this.y = 300;
                        }
                        else {
                            this.y = 365;
                        }
                    }
                    else {
                        this.y = 100;
                    }
                }
            }
            else if (custom) {
                this.x = (App.width - this.width) / 2;
                this.y = 200;
            }
            else {
                if ((App.height / App.width) <= 1.5) {
                    this.width = this.width - 30;
                    this.height = this.height - 70;
                    isIphone4 = true;
                }
                if (id % 2) {
                    this.x = 55;
                    if (id != 1 && id != 5) {
                        if (isIphone4) {
                            this.y = 550;
                        }
                        else {
                            this.y = 605;
                        }
                    }
                    else {
                        this.y = 120;
                    }
                }
                else {
                    this.x = App.width - this.width - 55;
                    if (id != 2 && id != 6) {
                        if (isIphone4) {
                            this.y = 550;
                        }
                        else {
                            this.y = 605;
                        }
                    }
                    else {
                        this.y = 120;
                    }
                }
            }
        };
        return Balloon;
    })(PIXI.Sprite);
    play.Balloon = Balloon;
})(play || (play = {}));
/// <reference path="../../Game.ts" />
var play;
(function (play) {
    var HighLightSelection = (function (_super) {
        __extends(HighLightSelection, _super);
        function HighLightSelection(id) {
            var _this = this;
            _super.call(this, PIXI.Texture.fromImage('HighLightSelection.png'));
            this.setPosition(id);
        }
        HighLightSelection.prototype.setPosition = function (id) {
            var isIphone4 = false;
            if ((App.height / App.width) <= 1.5) {
                this.width = this.width - 40;
                this.height = this.height - 80;
                isIphone4 = true;
            }
            if (id % 2) {
                this.x = 8;
                if (id != 1 && id != 5) {
                    if (isIphone4) {
                        this.y = 538;
                    }
                    else {
                        this.y = 593;
                    }
                }
                else {
                    this.y = 108;
                }
            }
            else {
                this.x = App.width - this.width - 5;
                if (id != 2 && id != 6) {
                    if (isIphone4) {
                        this.y = 538;
                    }
                    else {
                        this.y = 593;
                    }
                }
                else {
                    this.y = 108;
                }
            }
        };
        return HighLightSelection;
    })(PIXI.Sprite);
    play.HighLightSelection = HighLightSelection;
})(play || (play = {}));
/// <reference path="../../Game.ts" />
/// <reference path="BalloonHolder.ts" />
/// <reference path="Balloon.ts" />
/// <reference path="HighLightSelection.ts" />
/// <reference path="../../../config.ts" />
var play;
(function (play) {
    var BalloonHolderContainer = (function (_super) {
        __extends(BalloonHolderContainer, _super);
        function BalloonHolderContainer() {
            var _this = this;
            _super.call(this);
            this.scale.x = 0.9;
            this.scale.y = 0.9;
            this.x = App.width * 0.1 / 2;
            this.showFirsGroup();
            play.Play.state.on(function (data) {
                switch (data.state) {
                    case PLAYSTATE.MAIN:
                        break;
                    case PLAYSTATE.ANIMATE:
                        break;
                    case PLAYSTATE.BALLOON:
                        _this.highlightBallon(data.id);
                        break;
                }
            });
        }
        Object.defineProperty(BalloonHolderContainer, "Instance", {
            get: function () {
                if (!BalloonHolderContainer._Instance) {
                    BalloonHolderContainer._Instance = new BalloonHolderContainer();
                }
                return BalloonHolderContainer._Instance;
            },
            enumerable: true,
            configurable: true
        });
        BalloonHolderContainer.prototype.highlightBallon = function (id) {
            this.removeChild(BalloonHolderContainer.lastHighLighter);
            BalloonHolderContainer.lastHighLighter = new play.HighLightSelection(id);
            BalloonHolderContainer.selected = id;
            // console.log(id);
            this.addChild(BalloonHolderContainer.lastHighLighter);
        };
        BalloonHolderContainer.prototype.showFirsGroup = function () {
            this.removeChildren();
            this.addChild(new play.BalloonHolder(1));
            this.addChild(new play.BalloonHolder(2));
            this.addChild(new play.BalloonHolder(3));
            this.addChild(new play.BalloonHolder(4));
            this.addChild(new play.Balloon(1));
            this.addChild(new play.Balloon(2));
            this.addChild(new play.Balloon(3));
            this.addChild(new play.Balloon(4));
        };
        BalloonHolderContainer.prototype.showSecondGroup = function () {
            this.removeChildren();
            this.addChild(new play.BalloonHolder(5));
            this.addChild(new play.BalloonHolder(6));
            this.addChild(new play.BalloonHolder(7));
            this.addChild(new play.BalloonHolder(8));
            this.addChild(new play.Balloon(5));
            this.addChild(new play.Balloon(6));
            this.addChild(new play.Balloon(7));
            this.addChild(new play.Balloon(8));
        };
        BalloonHolderContainer.selected = 1;
        return BalloonHolderContainer;
    })(PIXI.Container);
    play.BalloonHolderContainer = BalloonHolderContainer;
})(play || (play = {}));
/// <reference path="../../../App.ts" />
var play;
(function (play) {
    var MakeCustom = (function (_super) {
        __extends(MakeCustom, _super);
        function MakeCustom() {
            _super.call(this, PIXI.Texture.fromFrame("Custom.png"));
            this.x = 20;
            this.y = App.height - this.height - 15;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
        }
        Object.defineProperty(MakeCustom, "Instance", {
            get: function () {
                if (!MakeCustom._Instance) {
                    MakeCustom._Instance = new MakeCustom();
                }
                return MakeCustom._Instance;
            },
            enumerable: true,
            configurable: true
        });
        MakeCustom.prototype.tapped = function () {
            play.Play.state.trigger({ state: PLAYSTATE.CUSTOM });
        };
        return MakeCustom;
    })(PIXI.Sprite);
    play.MakeCustom = MakeCustom;
})(play || (play = {}));
/// <reference path="../../../App.ts" />
var play;
(function (play) {
    var Next = (function (_super) {
        __extends(Next, _super);
        function Next() {
            _super.call(this, PIXI.Texture.fromFrame("Next.png"));
            this.x = App.width - this.width - 20;
            this.y = App.height - this.height - 15;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
        }
        Object.defineProperty(Next, "Instance", {
            get: function () {
                if (!Next._Instance) {
                    Next._Instance = new Next();
                }
                return Next._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Next.prototype.tapped = function () {
            play.Play.state.trigger({ state: PLAYSTATE.SHOOTPAGE });
            play.SelectBalloon.Instance.visible = false;
        };
        return Next;
    })(PIXI.Sprite);
    play.Next = Next;
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="BalloonHolderContainer.ts" />
var play;
(function (play) {
    var SlideUpArrow = (function (_super) {
        __extends(SlideUpArrow, _super);
        function SlideUpArrow() {
            _super.call(this, PIXI.Texture.fromFrame("ArrowUp.png"));
            this.x = (App.width - this.width) / 2;
            this.y = App.height - this.height - 75;
            this.anchor.x = 0.5;
            this.anchor.y = 0.5;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
        }
        Object.defineProperty(SlideUpArrow, "Instance", {
            get: function () {
                if (!SlideUpArrow._Instance) {
                    SlideUpArrow._Instance = new SlideUpArrow();
                }
                return SlideUpArrow._Instance;
            },
            enumerable: true,
            configurable: true
        });
        SlideUpArrow.prototype.tapped = function () {
            if (SlideUpArrow.currentGroup != 2) {
                play.BalloonHolderContainer.Instance.showSecondGroup();
                SlideUpArrow.currentGroup = 2;
                this.rotation += 3.1;
            }
            else {
                play.BalloonHolderContainer.Instance.showFirsGroup();
                SlideUpArrow.currentGroup = 1;
                this.rotation -= 3.1;
            }
        };
        SlideUpArrow.currentGroup = 1;
        return SlideUpArrow;
    })(PIXI.Sprite);
    play.SlideUpArrow = SlideUpArrow;
})(play || (play = {}));
/// <reference path="../../../../App.ts" />
/// <reference path="../../Play.ts" />
var play;
(function (play) {
    var instruction;
    (function (instruction) {
        var popUpBg = (function (_super) {
            __extends(popUpBg, _super);
            function popUpBg() {
                _super.call(this);
                this.beginFill(0, 0.8);
                this.drawRect(0, 0, App.width, App.height);
                this.endFill;
                this.visible = false;
                this.buttonMode = this.interactive = true;
                this.on("click", this.fnTap).on("tap", this.fnTap).on("mousedown", this.fnHigh).on("touchstart", this.fnHigh).on("mouseup", this.fnNormal).on("touchend", this.fnNormal).on("mouseupoutside", this.fnNormal).on("touchendoutside", this.fnNormal);
                this.alpha = 0;
            }
            Object.defineProperty(popUpBg, "Instance", {
                get: function () {
                    if (!popUpBg._Instance) {
                        popUpBg._Instance = new popUpBg();
                    }
                    return popUpBg._Instance;
                },
                enumerable: true,
                configurable: true
            });
            popUpBg.prototype.fnHigh = function () {
            };
            popUpBg.prototype.fnNormal = function () {
            };
            popUpBg.prototype.fnHide = function () {
                this.visible = false;
            };
            popUpBg.prototype.fnShow = function () {
                this.visible = true;
                TweenMax.to(this, 0.6, {
                    alpha: 0.9
                });
            };
            popUpBg.prototype.fnTap = function () {
                this.visible = false;
                TweenMax.to(this, 0.6, {
                    alpha: 0
                });
                play.instruction.BalloonGuide.Instance.fnHide();
            };
            return popUpBg;
        })(PIXI.Graphics);
        instruction.popUpBg = popUpBg;
    })(instruction = play.instruction || (play.instruction = {}));
})(play || (play = {}));
/// <reference path="../../../../App.ts" />
/// <reference path="../../Play.ts" />
var play;
(function (play) {
    var instruction;
    (function (instruction) {
        var BalloonGuide = (function (_super) {
            __extends(BalloonGuide, _super);
            function BalloonGuide() {
                _super.call(this, PIXI.Texture.fromFrame("BalloonGuide.png"));
                this.x = (App.width - this.width) / 2;
                this.y = (App.height - this.height) / 2;
                this.visible = false;
            }
            Object.defineProperty(BalloonGuide, "Instance", {
                get: function () {
                    if (!BalloonGuide._Instance) {
                        BalloonGuide._Instance = new BalloonGuide();
                    }
                    return BalloonGuide._Instance;
                },
                enumerable: true,
                configurable: true
            });
            BalloonGuide.prototype.fnShow = function () {
                this.visible = true;
            };
            BalloonGuide.prototype.fnHide = function () {
                this.visible = false;
            };
            return BalloonGuide;
        })(PIXI.Sprite);
        instruction.BalloonGuide = BalloonGuide;
    })(instruction = play.instruction || (play.instruction = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="BalloonHolderContainer.ts" />
/// <reference path="MakeCustom.ts" />
/// <reference path="Next.ts" />
/// <reference path="SlideArrow.ts" />
/// <reference path="popUp/popUpBg.ts" />
/// <reference path="popUp/BalloonGuide.ts" />
var play;
(function (play) {
    var SelectBalloon = (function (_super) {
        __extends(SelectBalloon, _super);
        function SelectBalloon() {
            var _this = this;
            _super.call(this);
            this.addChild(play.BalloonHolderContainer.Instance);
            this.addChild(play.Next.Instance);
            this.addChild(play.MakeCustom.Instance);
            this.addChild(play.SlideUpArrow.Instance);
            this.addChild(play.instruction.popUpBg.Instance);
            this.addChild(play.instruction.BalloonGuide.Instance);
            App.EventState.on(function (aState) {
                switch (aState) {
                    case STATE.PLAY:
                        _this.fnShowInstruction();
                        ;
                        break;
                }
            });
            play.Play.state.on(function (data) {
                switch (data.state) {
                    case PLAYSTATE.CUSTOM:
                        _this.hide();
                        break;
                }
            });
        }
        Object.defineProperty(SelectBalloon, "Instance", {
            get: function () {
                if (!SelectBalloon._Instance) {
                    SelectBalloon._Instance = new SelectBalloon();
                }
                return SelectBalloon._Instance;
            },
            enumerable: true,
            configurable: true
        });
        SelectBalloon.prototype.hide = function () {
            this.visible = false;
        };
        SelectBalloon.prototype.fnShowInstruction = function () {
            setTimeout(function () {
                play.instruction.popUpBg.Instance.fnShow();
                play.instruction.BalloonGuide.Instance.fnShow();
            }, 200);
            setTimeout(function () {
                play.instruction.popUpBg.Instance.fnHide();
                play.instruction.BalloonGuide.Instance.fnHide();
            }, 4500);
        };
        return SelectBalloon;
    })(PIXI.Container);
    play.SelectBalloon = SelectBalloon;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="selectBalloon/SelectBalloon.ts" />
var play;
(function (play) {
    var ShootBalloon = (function (_super) {
        __extends(ShootBalloon, _super);
        function ShootBalloon(id) {
            if (id === void 0) { id = 1; }
            var _this = this;
            _super.call(this, PIXI.Texture.fromImage('Balloon' + id + '.png'));
            if ((App.height / App.width) <= 1.5) {
                this.y = 145;
            }
            else {
                this.y = 200;
            }
            this.x = (App.width - this.width) / 2;
        }
        return ShootBalloon;
    })(PIXI.Sprite);
    play.ShootBalloon = ShootBalloon;
})(play || (play = {}));
/// <reference path="../Game.ts" />
var play;
(function (play) {
    var ShootBtn = (function (_super) {
        __extends(ShootBtn, _super);
        function ShootBtn() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('Shoot.png'));
            this.x = (App.width - this.width) / 2;
            this.y = App.height - this.height - 100;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
        }
        Object.defineProperty(ShootBtn, "Instance", {
            get: function () {
                if (!ShootBtn._Instance) {
                    ShootBtn._Instance = new ShootBtn();
                }
                return ShootBtn._Instance;
            },
            enumerable: true,
            configurable: true
        });
        ShootBtn.prototype.tapped = function () {
            _hmt.push(["_trackEvent", "button", "click", "ShootBtn"]);
            play.Play.state.trigger({ state: PLAYSTATE.SHOOT });
        };
        return ShootBtn;
    })(PIXI.Sprite);
    play.ShootBtn = ShootBtn;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="../../config.ts" />
var play;
(function (play) {
    var WishText = (function (_super) {
        __extends(WishText, _super);
        function WishText(text) {
            if (text === void 0) { text = ''; }
            var _this = this;
            _super.call(this, this.processText(text), { align: 'center', lineHeight: 45, font: "bold 30px Aria" });
            this.x = 170;
            this.y = 260;
            this.updatePosition(text);
        }
        WishText.prototype.processText = function (text) {
            var result = text;
            if (text.length > WishText.textWidth) {
                result = ' ';
                var i = 0;
                var j = WishText.textWidth;
                var temp;
                while (true) {
                    result = result + text.slice(i, j) + '\n ';
                    i = j;
                    temp = j + WishText.textWidth;
                    if (text[temp]) {
                        j = temp;
                    }
                    else {
                        j = text.length;
                        result = result + text.slice(i, j) + '\n ';
                        break;
                    }
                }
            }
            return result;
        };
        WishText.prototype.updatePosition = function (text) {
            if (text.length < WishText.textWidth) {
                this.x = 185;
                this.y = 270;
            }
            else if (text.length == WishText.textWidth) {
                this.y = 270;
            }
            else if (text.length > 2 * WishText.textWidth) {
                this.y = 230;
                this.x = 180;
            }
        };
        WishText.textWidth = 8;
        return WishText;
    })(PIXI.Text);
    play.WishText = WishText;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="selectBalloon/SelectBalloon.ts" />
var play;
(function (play) {
    var Avatar = (function (_super) {
        __extends(Avatar, _super);
        function Avatar() {
            _super.call(this, PIXI.Texture.fromImage('/' + $('meta[name="avatar"]').attr('content')));
            // this.width = 200
            // this.height = 200;
            var mask = new PIXI.Graphics();
            console.log('----', this.x, this.y, this.width / 2);
            mask.beginFill(0);
            mask.drawCircle(this.width / 2, this.width / 2, this.width / 2);
            mask.endFill;
            // mask.pivot.x = this.width / 2
            // mask.pivot.y = this.height / 2
            this.addChild(mask);
            this.mask = mask;
            this.width = 200;
            this.height = 200;
            this.x = App.width / 2;
        }
        Object.defineProperty(Avatar, "Instance", {
            get: function () {
                if (!Avatar._Instance) {
                    Avatar._Instance = new Avatar();
                }
                return Avatar._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Avatar;
    })(PIXI.Sprite);
    play.Avatar = Avatar;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="selectBalloon/SelectBalloon.ts" />
var play;
(function (play) {
    var WishTextContainer = (function (_super) {
        __extends(WishTextContainer, _super);
        function WishTextContainer(id) {
            if (id === void 0) { id = 1; }
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('WishText.png'));
            this.x = 140;
        }
        Object.defineProperty(WishTextContainer, "Instance", {
            get: function () {
                if (!WishTextContainer._Instance) {
                    WishTextContainer._Instance = new WishTextContainer();
                }
                return WishTextContainer._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return WishTextContainer;
    })(PIXI.Sprite);
    play.WishTextContainer = WishTextContainer;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="selectBalloon/SelectBalloon.ts" />
/// <reference path="WishTextContainer.ts" />
/// <reference path="WishText.ts" />
/// <reference path="Play.ts" />
var play;
(function (play) {
    var Wish = (function (_super) {
        __extends(Wish, _super);
        function Wish() {
            var _this = this;
            _super.call(this);
            this.addChild(play.WishTextContainer.Instance);
            console.log('aaaaaa');
            var text = '';
            if (App.customBalloon) {
                text = App.customBalloonText;
            }
            else {
                text = balloonText[play.BalloonHolderContainer.selected - 1];
            }
            _this.addChild(new play.WishText(text));
            play.Play.state.on(function (data) {
                switch (data.state) {
                    case PLAYSTATE.SHOOTPAGE:
                        var text = '';
                        if (App.customBalloon) {
                            text = App.customBalloonText;
                        }
                        else {
                            text = balloonText[play.BalloonHolderContainer.selected - 1];
                        }
                        _this.addChild(new play.WishText(text));
                        break;
                }
            });
            this.y = (App.height - this.height) / 2 + 100;
        }
        Object.defineProperty(Wish, "Instance", {
            get: function () {
                if (!Wish._Instance) {
                    Wish._Instance = new Wish();
                }
                return Wish._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Wish;
    })(PIXI.Container);
    play.Wish = Wish;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="selectBalloon/SelectBalloon.ts" />
/// <reference path="shootBalloon.ts" />
/// <reference path="ShootBtn.ts" />
/// <reference path="WishText.ts" />
/// <reference path="Avatar.ts" />
/// <reference path="Wish.ts" />
var play;
(function (play) {
    var Shoot = (function (_super) {
        __extends(Shoot, _super);
        function Shoot() {
            var _this = this;
            _super.call(this);
            // alert('a');
            play.Play.state.on(function (data) {
                console.log(data);
                switch (data.state) {
                    case PLAYSTATE.MAIN:
                        break;
                    case PLAYSTATE.ANIMATE:
                        break;
                    case PLAYSTATE.SHOOTPAGE:
                        _this.show();
                        break;
                    case PLAYSTATE.SHOOT:
                        _this.fnAnimate();
                        _this.fnSaveBalloon();
                        break;
                }
            });
        }
        Object.defineProperty(Shoot, "Instance", {
            get: function () {
                if (!Shoot._Instance) {
                    Shoot._Instance = new Shoot();
                }
                return Shoot._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Shoot.prototype.show = function () {
            if (App.customBalloon) {
                // id = App.customBalloon;
                this.addChild(new play.ShootBalloon(App.customBalloon));
            }
            else {
                this.addChild(new play.ShootBalloon(play.BalloonHolderContainer.selected));
            }
            this.addChild(play.Wish.Instance);
            play.Wish.Instance.addChild(play.Avatar.Instance);
        };
        Shoot.prototype.fnAnimate = function () {
            var _this = this;
            TweenLite.to(this, 5, {
                y: -200 - _this.height
            });
        };
        Shoot.prototype.fnSaveBalloon = function () {
            if (Shoot.onRequest) {
                return;
            }
            var id;
            var msg;
            if (App.customBalloon) {
                id = App.customBalloon;
                msg = App.customBalloonText;
            }
            else {
                id = play.BalloonHolderContainer.selected;
                msg = balloonText[id - 1];
            }
            sdata.link = 'http://event.jins-cn.com/mobile?user_id=' + $('meta[name="user_id"]').attr('content');
            sdata.title = '点击' + $('meta[name="nickname"]').attr('content') + '的新年愿望，会有机会帮TA实现哦！';
            sdata.desc = '点击' + $('meta[name="nickname"]').attr('content') + '的新年愿望，会有机会帮TA实现哦！';
            console.log('fnSaveBalloon--', id, msg);
            if (id >= 1 && id <= 8) {
                $.ajax({
                    type: 'POST',
                    url: '/api/jins/balloon',
                    data: { balloon_id: id, user_id: $('meta[name="user_id"]').attr('content'), message: msg, isInteract: $('meta[name="isInteract"]').attr('content') },
                    dataType: 'json',
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="_token"]').attr('content')
                    },
                    success: function (data) {
                        console.log('response data---', data);
                        setTimeout(function () {
                            Shoot.onRequest = true;
                            jQuery('#userAvatar')[0].style.display = 'none';
                            play.ShootBtn.Instance.visible = false;
                            App.over();
                        }, 1500);
                    },
                    error: function (xhr, type) {
                        Shoot.onRequest = true;
                        console.log('Ajax error!');
                    }
                });
            }
            else {
                console.log('invalid balloon id!--');
            }
        };
        Shoot.onRequest = false;
        return Shoot;
    })(PIXI.Container);
    play.Shoot = Shoot;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="shoot.ts" />
/// <reference path="ShootBtn.ts" />
var play;
(function (play) {
    var ShootPage = (function (_super) {
        __extends(ShootPage, _super);
        function ShootPage() {
            var _this = this;
            _super.call(this);
            this.visible = false;
            this.addChild(play.Shoot.Instance);
            this.addChild(play.ShootBtn.Instance);
            play.Play.state.on(function (data) {
                switch (data.state) {
                    case PLAYSTATE.MAIN:
                        break;
                    case PLAYSTATE.ANIMATE:
                        break;
                    case PLAYSTATE.SHOOTPAGE:
                        _this.show();
                        break;
                }
            });
        }
        Object.defineProperty(ShootPage, "Instance", {
            get: function () {
                if (!ShootPage._Instance) {
                    ShootPage._Instance = new ShootPage();
                }
                return ShootPage._Instance;
            },
            enumerable: true,
            configurable: true
        });
        ShootPage.prototype.show = function () {
            this.visible = true;
            // $('#userAvatar img').prop('src', $('meta[name="avatar"]').attr('content')); 
            // jQuery('#userAvatar')[0].style.display = 'block';
        };
        return ShootPage;
    })(PIXI.Container);
    play.ShootPage = ShootPage;
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="Custom.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var Left = (function (_super) {
            __extends(Left, _super);
            function Left() {
                _super.call(this, PIXI.Texture.fromFrame('Left.png'));
                var _this = this;
                this.y = 300;
                this.x = 80;
                this.buttonMode = this.interactive = true;
                this.on("click", this.tapped).on("tap", this.tapped);
            }
            Object.defineProperty(Left, "Instance", {
                get: function () {
                    if (!Left._Instance) {
                        Left._Instance = new Left();
                    }
                    return Left._Instance;
                },
                enumerable: true,
                configurable: true
            });
            Left.prototype.tapped = function () {
                play.custom.CustomBalloonHolder.Instance.moveLeft();
            };
            return Left;
        })(PIXI.Sprite);
        custom.Left = Left;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="Custom.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var Right = (function (_super) {
            __extends(Right, _super);
            function Right() {
                _super.call(this, PIXI.Texture.fromFrame('Right.png'));
                var _this = this;
                this.y = 300;
                this.x = App.width - this.width - 80;
                this.buttonMode = this.interactive = true;
                this.on("click", this.tapped).on("tap", this.tapped);
            }
            Object.defineProperty(Right, "Instance", {
                get: function () {
                    if (!Right._Instance) {
                        Right._Instance = new Right();
                    }
                    return Right._Instance;
                },
                enumerable: true,
                configurable: true
            });
            Right.prototype.tapped = function () {
                play.custom.CustomBalloonHolder.Instance.moveRight();
            };
            return Right;
        })(PIXI.Sprite);
        custom.Right = Right;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var CustomBalloonBg = (function (_super) {
            __extends(CustomBalloonBg, _super);
            function CustomBalloonBg() {
                _super.call(this, PIXI.Texture.fromFrame('CustomBalloonBg.png'));
                var _this = this;
                this.width = this.width - 200;
                this.height = this.height - 240;
                this.y = 150;
                this.x = (App.width - this.width) / 2;
            }
            Object.defineProperty(CustomBalloonBg, "Instance", {
                get: function () {
                    if (!CustomBalloonBg._Instance) {
                        CustomBalloonBg._Instance = new CustomBalloonBg();
                    }
                    return CustomBalloonBg._Instance;
                },
                enumerable: true,
                configurable: true
            });
            return CustomBalloonBg;
        })(PIXI.Sprite);
        custom.CustomBalloonBg = CustomBalloonBg;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="CustomBalloonBg.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var CustomBalloonHolder = (function (_super) {
            __extends(CustomBalloonHolder, _super);
            function CustomBalloonHolder() {
                _super.call(this);
                var _this = this;
                this.addChild(play.custom.CustomBalloonBg.Instance);
                CustomBalloonHolder.currentBalloon = new play.Balloon(CustomBalloonHolder.currentBalloon_id, false, true);
                this.addChild(CustomBalloonHolder.currentBalloon);
            }
            Object.defineProperty(CustomBalloonHolder, "Instance", {
                get: function () {
                    if (!CustomBalloonHolder._Instance) {
                        CustomBalloonHolder._Instance = new CustomBalloonHolder();
                    }
                    return CustomBalloonHolder._Instance;
                },
                enumerable: true,
                configurable: true
            });
            CustomBalloonHolder.prototype.show = function () {
                this.visible = true;
            };
            CustomBalloonHolder.prototype.moveLeft = function () {
                if (CustomBalloonHolder.currentBalloon_id > 1) {
                    this.updateBalloon(--CustomBalloonHolder.currentBalloon_id);
                }
            };
            CustomBalloonHolder.prototype.moveRight = function () {
                if (CustomBalloonHolder.currentBalloon_id < 8) {
                    this.updateBalloon(++CustomBalloonHolder.currentBalloon_id);
                }
            };
            CustomBalloonHolder.prototype.updateBalloon = function (id) {
                this.removeChild(CustomBalloonHolder.currentBalloon);
                CustomBalloonHolder.currentBalloon = new play.Balloon(id, false, true);
                this.addChild(CustomBalloonHolder.currentBalloon);
            };
            CustomBalloonHolder.currentBalloon_id = 1;
            return CustomBalloonHolder;
        })(PIXI.Container);
        custom.CustomBalloonHolder = CustomBalloonHolder;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="Custom.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var SellectCustomBalloon = (function (_super) {
            __extends(SellectCustomBalloon, _super);
            function SellectCustomBalloon() {
                _super.call(this, PIXI.Texture.fromFrame('SellectCustomBalloon.png'));
                var _this = this;
                this.y = 670;
                this.x = (App.width - this.width) / 2;
            }
            Object.defineProperty(SellectCustomBalloon, "Instance", {
                get: function () {
                    if (!SellectCustomBalloon._Instance) {
                        SellectCustomBalloon._Instance = new SellectCustomBalloon();
                    }
                    return SellectCustomBalloon._Instance;
                },
                enumerable: true,
                configurable: true
            });
            return SellectCustomBalloon;
        })(PIXI.Sprite);
        custom.SellectCustomBalloon = SellectCustomBalloon;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="Custom.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var Next = (function (_super) {
            __extends(Next, _super);
            function Next() {
                _super.call(this, PIXI.Texture.fromFrame("Next.png"));
                this.x = (App.width - this.width) / 2;
                this.y = App.height - this.height - 15;
                this.buttonMode = this.interactive = true;
                this.on("click", this.tapped).on("tap", this.tapped);
            }
            Object.defineProperty(Next, "Instance", {
                get: function () {
                    if (!Next._Instance) {
                        Next._Instance = new Next();
                    }
                    return Next._Instance;
                },
                enumerable: true,
                configurable: true
            });
            Next.prototype.tapped = function () {
                play.custom.Custom.Instance.visible = false;
                App.customBalloonText = jQuery('#customWishMessage input').val();
                App.customBalloon = play.custom.CustomBalloonHolder.currentBalloon_id;
                jQuery('#customWishMessage input').val('');
                jQuery('#customWishMessage')[0].style.display = 'none';
                play.Play.state.trigger({ state: PLAYSTATE.SHOOTPAGE });
            };
            return Next;
        })(PIXI.Sprite);
        custom.Next = Next;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../../../App.ts" />
/// <reference path="Left.ts" />
/// <reference path="Right.ts" />
/// <reference path="CustomBalloonHolder.ts" />
/// <reference path="SellectCustomBalloon.ts" />
/// <reference path="Next.ts" />
var play;
(function (play) {
    var custom;
    (function (custom) {
        var Custom = (function (_super) {
            __extends(Custom, _super);
            function Custom() {
                _super.call(this);
                var _this = this;
                this.addChild(play.custom.Left.Instance);
                this.addChild(play.custom.Right.Instance);
                this.addChild(play.custom.CustomBalloonHolder.Instance);
                this.addChild(play.custom.SellectCustomBalloon.Instance);
                this.addChild(play.custom.Next.Instance);
                this.visible = false;
                play.Play.state.on(function (data) {
                    switch (data.state) {
                        case PLAYSTATE.CUSTOM:
                            console.log('custom----');
                            _this.show();
                            break;
                    }
                });
            }
            Object.defineProperty(Custom, "Instance", {
                get: function () {
                    if (!Custom._Instance) {
                        Custom._Instance = new Custom();
                    }
                    return Custom._Instance;
                },
                enumerable: true,
                configurable: true
            });
            Custom.prototype.show = function () {
                this.visible = true;
                jQuery('#customWishMessage')[0].style.display = 'block';
            };
            return Custom;
        })(PIXI.Container);
        custom.Custom = Custom;
    })(custom = play.custom || (play.custom = {}));
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="selectBalloon/SelectBalloon.ts" />
/// <reference path="ShootPage.ts" />
/// <reference path="custom/Custom.ts" />
var play;
(function (play) {
    var Play = (function (_super) {
        __extends(Play, _super);
        function Play() {
            var _this = this;
            _super.call(this);
            Play.state = new LiteEvent();
            this.visible = false;
            this.addChild(play.SelectBalloon.Instance);
            this.addChild(play.custom.Custom.Instance);
            this.addChild(play.ShootPage.Instance);
            App.EventState.on(function (aState) {
                _this.hide();
                switch (aState) {
                    case STATE.PLAY:
                        console.log('play----');
                        _this.show();
                        break;
                }
            });
        }
        Object.defineProperty(Play, "Instance", {
            get: function () {
                if (!Play._Instance) {
                    Play._Instance = new Play();
                }
                return Play._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Play.prototype.show = function () {
            this.visible = true;
        };
        Play.prototype.hide = function () {
            this.visible = false;
        };
        Play.opening = false;
        Play.selections = [];
        return Play;
    })(PIXI.Container);
    play.Play = Play;
})(play || (play = {}));
/// <reference path="../Over.ts" />
/// <reference path="../../play/Play.ts" />
var over;
(function (over) {
    var share;
    (function (share) {
        var ShareBg = (function (_super) {
            __extends(ShareBg, _super);
            function ShareBg() {
                _super.call(this);
                this.beginFill(0, 0.95);
                this.drawRect(0, 0, App.width, App.height);
                this.endFill;
                this.visible = false;
                this.buttonMode = this.interactive = true;
                this.on("click", this.fnTap).on("tap", this.fnTap);
                this.alpha = 0;
            }
            Object.defineProperty(ShareBg, "Instance", {
                get: function () {
                    if (!ShareBg._Instance) {
                        ShareBg._Instance = new ShareBg();
                    }
                    return ShareBg._Instance;
                },
                enumerable: true,
                configurable: true
            });
            ShareBg.prototype.fnHigh = function () {
            };
            ShareBg.prototype.fnNormal = function () {
            };
            ShareBg.prototype.fnShow = function () {
                this.visible = true;
                TweenMax.to(this, 0.6, {
                    alpha: 0.9
                });
            };
            ShareBg.prototype.fnTap = function () {
                // alert();
                // if (over.share.ShareCopy.Instance.visible){
                //     over.Over.Instance.fnShowRequirePhone();
                // }
                // this.visible = false;
                // TweenMax.to(this, 0.6, {
                // 	alpha: 0
                // });
                // over.share.ShareCopy.Instance.visible = false;
            };
            return ShareBg;
        })(PIXI.Graphics);
        share.ShareBg = ShareBg;
    })(share = over.share || (over.share = {}));
})(over || (over = {}));
/// <reference path="../Over.ts" />
var over;
(function (over) {
    var share;
    (function (share) {
        var ShareCopy = (function (_super) {
            __extends(ShareCopy, _super);
            function ShareCopy() {
                _super.call(this, PIXI.Texture.fromFrame("ShareCopy.png"));
                this.x = App.width - this.width;
                this.y = 0;
                this.visible = false;
            }
            Object.defineProperty(ShareCopy, "Instance", {
                get: function () {
                    if (!ShareCopy._Instance) {
                        ShareCopy._Instance = new ShareCopy();
                    }
                    return ShareCopy._Instance;
                },
                enumerable: true,
                configurable: true
            });
            ShareCopy.prototype.fnShow = function () {
                this.visible = true;
            };
            ShareCopy.prototype.fnHide = function () {
                this.visible = false;
            };
            return ShareCopy;
        })(PIXI.Sprite);
        share.ShareCopy = ShareCopy;
    })(share = over.share || (over.share = {}));
})(over || (over = {}));
var util;
(function (util) {
    var Util = (function () {
        function Util() {
        }
        Util.validatePhone = function (phone) {
            var myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
            if (!myreg.test(phone)) {
                return false;
            }
            return true;
        };
        Util.getQueryVariable = function (variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) {
                    return pair[1];
                }
            }
            return '';
        };
        return Util;
    })();
    util.Util = Util;
})(util || (util = {}));
/// <reference path="../../App.ts" />
var over;
(function (over) {
    var EndingMessage = (function (_super) {
        __extends(EndingMessage, _super);
        function EndingMessage() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('EndingMessage.png'));
            this.visible = false;
            this.x = (App.width - this.width) / 2;
            this.y = App.height - this.height - 200;
        }
        Object.defineProperty(EndingMessage, "Instance", {
            get: function () {
                if (!EndingMessage._Instance) {
                    EndingMessage._Instance = new EndingMessage();
                }
                return EndingMessage._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return EndingMessage;
    })(PIXI.Sprite);
    over.EndingMessage = EndingMessage;
})(over || (over = {}));
/// <reference path="../../App.ts" />
var over;
(function (over) {
    var Thanks = (function (_super) {
        __extends(Thanks, _super);
        function Thanks() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('Thanks.png'));
            this.visible = false;
            this.x = (App.width - this.width) / 2;
            this.y = 300;
        }
        Object.defineProperty(Thanks, "Instance", {
            get: function () {
                if (!Thanks._Instance) {
                    Thanks._Instance = new Thanks();
                }
                return Thanks._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Thanks;
    })(PIXI.Sprite);
    over.Thanks = Thanks;
})(over || (over = {}));
/// <reference path="../../App.ts" />
/// <reference path="Over.ts" />
var over;
(function (over) {
    var Submit = (function (_super) {
        __extends(Submit, _super);
        function Submit() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('Submit.png'));
            this.visible = false;
            this.x = (App.width - this.width) / 2;
            this.y = App.height - this.height - 100;
            this.buttonMode = this.interactive = true;
            this.on("click", this.tapped).on("tap", this.tapped);
        }
        Object.defineProperty(Submit, "Instance", {
            get: function () {
                if (!Submit._Instance) {
                    Submit._Instance = new Submit();
                }
                return Submit._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Submit.prototype.tapped = function () {
            var phoneNuber = parseInt(jQuery('#phoneInput input').val());
            if (util.Util.validatePhone(phoneNuber)) {
                $.ajax({
                    type: 'GET',
                    url: '/api/jins/phone',
                    data: { phone: phoneNuber, user_id: $('meta[name="user_id"]').attr('content') },
                    dataType: 'json',
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="_token"]').attr('content')
                    },
                    success: function (data) {
                        console.log('response data---', data);
                        jQuery('#phoneInput input').val(' ');
                        over.Over.Instance.fnHideRequirePhone();
                    },
                    error: function (xhr, type) {
                        // jQuery('#phoneInput input').val(' ');
                        // over.Over.Instance.fnHideRequirePhone();
                        // console.log('Ajax error!');
                        // alert(xhr);
                        jQuery('#phoneInput input').val(' ');
                        over.Over.Instance.fnHideRequirePhone();
                    }
                });
            }
            else {
                alert('手机号码无效, 请重新输入');
                jQuery('#phoneInput input').val(' ');
            }
        };
        return Submit;
    })(PIXI.Sprite);
    over.Submit = Submit;
})(over || (over = {}));
/// <reference path="../../App.ts" />
var over;
(function (over) {
    var PhoneInputText = (function (_super) {
        __extends(PhoneInputText, _super);
        function PhoneInputText() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('PhoneInputText.png'));
            this.visible = false;
            this.x = (App.width - this.width) / 2;
            this.y = (App.height - this.height) / 2 - 150;
        }
        Object.defineProperty(PhoneInputText, "Instance", {
            get: function () {
                if (!PhoneInputText._Instance) {
                    PhoneInputText._Instance = new PhoneInputText();
                }
                return PhoneInputText._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return PhoneInputText;
    })(PIXI.Sprite);
    over.PhoneInputText = PhoneInputText;
})(over || (over = {}));
/// <reference path="../../App.ts" />
var over;
(function (over) {
    var Explosion = (function (_super) {
        __extends(Explosion, _super);
        function Explosion() {
            var _this = this;
            var textures = [];
            var i = 0;
            // this.alpha = 0;
            while (++i <= 5) {
                textures.push(PIXI.Texture.fromFrame("Explosion" + i + ".png"));
            }
            _super.call(this, textures);
            this.animationSpeed = 0.1;
            this.x = (App.width - this.width) / 2;
            this.y = (App.height - this.height) / 2;
            this.loop = false;
            this.visible = false;
            this.onComplete = function () {
                _this.visible = false;
                over.Over.Instance.addCard();
            };
        }
        Object.defineProperty(Explosion, "Instance", {
            get: function () {
                if (!Explosion._Instance) {
                    Explosion._Instance = new Explosion();
                }
                return Explosion._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Explosion.prototype.show = function () {
            this.visible = true;
            // this.alpha = 1;
            this.play();
        };
        Explosion.prototype.FnPlay = function () {
            // alert('a');
            this.visible = true;
            this.alpha = 1;
            this.play();
        };
        Explosion.prototype.FnStop = function () {
            this.gotoAndStop(5);
            this.visible = false;
            this.alpha = 0;
        };
        return Explosion;
    })(PIXI.extras.MovieClip);
    over.Explosion = Explosion;
})(over || (over = {}));
/// <reference path="../../../App.ts" />
var over;
(function (over) {
    var popup;
    (function (popup) {
        var popUpBg = (function (_super) {
            __extends(popUpBg, _super);
            function popUpBg() {
                _super.call(this);
                this.beginFill(0, 0.95);
                this.drawRect(0, 0, App.width, App.height);
                this.endFill;
                this.visible = false;
                this.buttonMode = this.interactive = true;
                this.on("click", this.fnTap).on("tap", this.fnTap).on("mousedown", this.fnHigh).on("touchstart", this.fnHigh).on("mouseup", this.fnNormal).on("touchend", this.fnNormal).on("mouseupoutside", this.fnNormal).on("touchendoutside", this.fnNormal);
                this.alpha = 0;
            }
            Object.defineProperty(popUpBg, "Instance", {
                get: function () {
                    if (!popUpBg._Instance) {
                        popUpBg._Instance = new popUpBg();
                    }
                    return popUpBg._Instance;
                },
                enumerable: true,
                configurable: true
            });
            popUpBg.prototype.fnHigh = function () {
            };
            popUpBg.prototype.fnNormal = function () {
            };
            popUpBg.prototype.fnShow = function () {
                this.visible = true;
                TweenMax.to(this, 0.6, {
                    alpha: 0.9
                });
            };
            popUpBg.prototype.fnTap = function () {
                this.visible = false;
                TweenMax.to(this, 0.6, {
                    alpha: 0
                });
                over.popup.SlideDown.Instance.fnHide();
                over.Over.Instance.showLuckyBalloon();
                play.Shoot.Instance.visible = false;
            };
            return popUpBg;
        })(PIXI.Graphics);
        popup.popUpBg = popUpBg;
    })(popup = over.popup || (over.popup = {}));
})(over || (over = {}));
/// <reference path="../../../App.ts" />
var over;
(function (over) {
    var popup;
    (function (popup) {
        var SlideDown = (function (_super) {
            __extends(SlideDown, _super);
            function SlideDown() {
                _super.call(this, PIXI.Texture.fromFrame("RedEnvelopCopy.png"));
                this.x = (App.width - this.width) / 2;
                this.y = (App.height - this.height) / 2;
                this.visible = false;
            }
            Object.defineProperty(SlideDown, "Instance", {
                get: function () {
                    if (!SlideDown._Instance) {
                        SlideDown._Instance = new SlideDown();
                    }
                    return SlideDown._Instance;
                },
                enumerable: true,
                configurable: true
            });
            SlideDown.prototype.fnShow = function () {
                this.visible = true;
            };
            SlideDown.prototype.fnHide = function () {
                this.visible = false;
            };
            return SlideDown;
        })(PIXI.Sprite);
        popup.SlideDown = SlideDown;
    })(popup = over.popup || (over.popup = {}));
})(over || (over = {}));
/// <reference path="../Game.ts" />
var over;
(function (over) {
    var LuckyBalloon = (function (_super) {
        __extends(LuckyBalloon, _super);
        function LuckyBalloon() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('LuckyBalloon.png'));
            this.visible = false;
            this.x = (App.width - this.width) / 2;
            this.y = (App.height - this.height) / 2;
        }
        Object.defineProperty(LuckyBalloon, "Instance", {
            get: function () {
                if (!LuckyBalloon._Instance) {
                    LuckyBalloon._Instance = new LuckyBalloon();
                }
                return LuckyBalloon._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return LuckyBalloon;
    })(PIXI.Sprite);
    over.LuckyBalloon = LuckyBalloon;
})(over || (over = {}));
/// <reference path="../play/Play.ts" />
/// <reference path="../intro/Intro.ts" />
/// <reference path="share/ShareBg.ts" />
/// <reference path="share/ShareCopy.ts" />
/// <reference path="../../util.ts" />
/// <reference path="EndingMessage.ts" />
/// <reference path="Thanks.ts" />
/// <reference path="Submit.ts" />
/// <reference path="PhoneInputText.ts" />
/// <reference path="Explosion.ts" />
/// <reference path="popUp/popUpBg.ts" />
/// <reference path="popUp/slideDown.ts" />
/// <reference path="LuckyBalloon.ts" />
var over;
(function (over) {
    var Over = (function (_super) {
        __extends(Over, _super);
        function Over() {
            var _this = this;
            _super.call(this);
            this.visible = false;
            this.addChild(over.share.ShareBg.Instance);
            this.addChild(over.share.ShareCopy.Instance);
            this.addChild(over.EndingMessage.Instance);
            this.addChild(over.Thanks.Instance);
            this.addChild(over.PhoneInputText.Instance);
            this.addChild(over.Thanks.Instance);
            this.addChild(over.Submit.Instance);
            this.addChild(over.popup.popUpBg.Instance);
            this.addChild(over.popup.SlideDown.Instance);
            this.addChild(over.LuckyBalloon.Instance);
            this.addChild(over.Explosion.Instance);
            App.EventState.on(function (aState) {
                switch (aState) {
                    case STATE.PLAY:
                        break;
                    case STATE.OVER:
                        _this.show();
                        break;
                }
            });
        }
        Object.defineProperty(Over, "Instance", {
            get: function () {
                if (!Over._Instance) {
                    Over._Instance = new Over();
                }
                return Over._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Over.prototype.show = function () {
            this.visible = true;
            var _this = this;
            over.share.ShareBg.Instance.fnShow();
            over.share.ShareCopy.Instance.fnShow();
        };
        Over.prototype.fnShowRequirePhone = function () {
            over.share.ShareBg.Instance.visible = false;
            over.share.ShareCopy.Instance.visible = false;
            jQuery('#phoneInput')[0].style.display = 'block';
            over.Submit.Instance.visible = true;
            over.PhoneInputText.Instance.visible = true;
        };
        Over.prototype.fnHideRequirePhone = function () {
            jQuery('#phoneInput')[0].style.display = 'none';
            over.Submit.Instance.visible = false;
            over.PhoneInputText.Instance.visible = false;
            this.showPopUp();
        };
        Over.prototype.showPopUp = function () {
            over.popup.popUpBg.Instance.fnShow();
            over.popup.SlideDown.Instance.fnShow();
        };
        Over.prototype.showEnding = function () {
            over.EndingMessage.Instance.visible = true;
            over.Thanks.Instance.visible = true;
        };
        Over.prototype.showExplosion = function () {
            // alert('a');
            over.Explosion.Instance.show();
            console.log('=======================');
            $.ajax({
                type: 'POST',
                url: '/api/jins/luck',
                data: {
                    user_id: $('meta[name="user_id"]').attr('content'),
                    card_id: $('meta[name="card_id"]').attr('content'),
                    isInteract: $('meta[name="isInteract"]').attr('content')
                },
                dataType: 'json',
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="_token"]').attr('content')
                },
                success: function (data) {
                    console.log(data);
                },
                error: function (xhr, type) {
                    console.log('ajax error');
                }
            });
            // var _this = this;
            // this.addChild(over.Explosion.Instance);
            // setTimeout(function() {
            // 	_this.removeChild(over.Explosion.Instance);
            // 	_this.showEnding();
            // }, 5000);
        };
        Over.prototype.addCard = function () {
            addCard();
        };
        Over.prototype.showLuckyBalloon = function () {
            var _this = this;
            over.LuckyBalloon.Instance.visible = true;
            setTimeout(function () {
                over.LuckyBalloon.Instance.visible = false;
                _this.showExplosion();
            }, 2000);
        };
        return Over;
    })(PIXI.Container);
    over.Over = Over;
})(over || (over = {}));
/// <reference path="App.ts" />
/// <reference path="game/over/Over.ts" />
var STATE;
(function (STATE) {
    STATE[STATE["LOADING"] = 0] = "LOADING";
    STATE[STATE["INTRO"] = 1] = "INTRO";
    STATE[STATE["PLAY"] = 2] = "PLAY";
    STATE[STATE["OVER"] = 3] = "OVER";
    STATE[STATE["MYPAGE"] = 4] = "MYPAGE";
})(STATE || (STATE = {}));
var PLAYSTATE;
(function (PLAYSTATE) {
    PLAYSTATE[PLAYSTATE["MAIN"] = 0] = "MAIN";
    PLAYSTATE[PLAYSTATE["ANIMATE"] = 1] = "ANIMATE";
    PLAYSTATE[PLAYSTATE["BALLOON"] = 2] = "BALLOON";
    PLAYSTATE[PLAYSTATE["CUSTOM"] = 3] = "CUSTOM";
    PLAYSTATE[PLAYSTATE["SHOOTPAGE"] = 4] = "SHOOTPAGE";
    PLAYSTATE[PLAYSTATE["SHOOT"] = 5] = "SHOOT";
    PLAYSTATE[PLAYSTATE["SHARE"] = 6] = "SHARE";
    PLAYSTATE[PLAYSTATE["RULE"] = 7] = "RULE";
    PLAYSTATE[PLAYSTATE["SLIDEDOWN"] = 8] = "SLIDEDOWN";
})(PLAYSTATE || (PLAYSTATE = {}));
var balloonText = [
    "想要当JINS眼镜的模特",
    "想要一台单反相机",
    "想要去一票难求的陈奕迅演唱会",
    "想要请一年的健身私教",
    "想要去日本旅行",
    "想要送一些PC眼镜给孤儿院的小朋友",
    "想要拥有一副完全定制的眼镜",
    "想要得到JINS实习的机会"];
window.requestAnimFrame = (function () {
    return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };
})();
var _hmt = _hmt || [];
(function () {
    var hm = document.createElement("script");
    hm.src = "//hm.baidu.com/hm.js?599b308e5d4c42189ba18f54397dd9ca";
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(hm, s);
})();
var sdata = {
    title: '放飞气球，愿望成真，更有888元红包等你拿',
    desc: '放飞气球，愿望成真，更有888元红包等你拿',
    link: 'http://event.jins-cn.com/mobile',
    imgUrl: 'http://event.jins-cn.com/assets/jins/wechat.jpg',
    success: function (data) {
        //alert('用户确认分享后执行的回调函数');
        if (over.share.ShareCopy.Instance.visible) {
            over.Over.Instance.fnShowRequirePhone();
        }
        _hmt.push(["_trackEvent", "button", "click", "ShareSuccess"]);
    },
    cancel: function () {
        // alert('用户取消分享后执行的回调函数');
        _hmt.push(["_trackEvent", "button", "click", "ShareCancel"]);
    }
};
var LiteEvent = (function () {
    function LiteEvent() {
        this.handlers = [];
    }
    LiteEvent.prototype.on = function (handler) {
        this.handlers.push(handler);
    };
    LiteEvent.prototype.off = function (handler) {
        this.handlers = this.handlers.filter(function (h) { return h !== handler; });
    };
    LiteEvent.prototype.trigger = function (data) {
        if (this.handlers) {
            this.handlers.slice(0).forEach(function (h) { return h(data); });
        }
    };
    return LiteEvent;
})();
/// <reference path="../App.ts" />
var Sfx = (function () {
    function Sfx() {
    }
    Sfx.FnBgm = function () {
        if (!createjs.Sound.initializeDefaultPlugins()) {
            return;
        }
        var audioPath = "/assets/jins/";
        var sounds = [
            { id: "Music", src: "bgm.mp3" }
        ];
        createjs.Sound.alternateExtensions = ["ogg"];
        createjs.Sound.addEventListener("fileload", Sfx.FnPlayBgm);
        createjs.Sound.registerSounds(sounds, audioPath);
    };
    Sfx.FnPlayBgm = function () {
        createjs.Sound.play("Music", createjs.Sound.INTERRUPT_ANY, 0, 0, -1, .1);
        // vazee.control.Music.Instance.fnActive();
        //       if (musicOn) {
        //           createjs.Sound.play("Music", createjs.Sound.INTERRUPT_ANY, 0, 0, -1, .1);
        //       }
        //       else {
        //           vazee.control.Music.Instance.musicOn = false;
        //       }
    };
    return Sfx;
})();
/// <reference path="../typings/tsd.d.ts" />
/// <reference path="config.ts" />
/// <reference path="service/LiteEvent.ts" />
/// <reference path="game/Game.ts" />
/// <reference path="service/Sfx.ts" />
/// <reference path="util.ts" />
var App = (function () {
    function App() {
    }
    App.loadAssets = function () {
        App.screenWidth = (document.documentElement.clientWidth || App.width);
        App.screenHeight = (document.documentElement.clientHeight || App.height);
        console.log('loading--', $('meta[name="user_id"]').attr('content'));
        var isLoaded = false;
        var _list = [
            // "http://7xq4ii.com2.z0.glb.qiniucdn.com/mobile_all.json",
            // "http://7xq4ii.com2.z0.glb.qiniucdn.com/mobile_extras.json",
            // "http://7xq4ii.com2.z0.glb.qiniucdn.com/mobile_extras2.json",
            // "http://7xq4ii.com2.z0.glb.qiniucdn.com/mobile_extras3.json",
            "/assets/jins/mobile_all.png",
            "/assets/jins/mobile_all.json",
            "/assets/jins/mobile_extras.png",
            "/assets/jins/mobile_extras.json",
            "/assets/jins/mobile_extras2.png",
            "/assets/jins/mobile_extras2.json",
            "/assets/jins/mobile_extras3.png",
            "/assets/jins/mobile_extras3.json",
            "/" + $('meta[name="avatar"]').attr('content')
        ];
        var _this = this;
        PIXI.loader.add(_list).load(function () {
            $("#game").show();
            $("#loader").hide();
            var idOnUrl = util.Util.getQueryVariable('user_id');
            if (idOnUrl) {
                App.isShared = true;
                App.saveSupport(idOnUrl);
                App.getStatistics(idOnUrl);
            }
            else {
                //alert('avatar Not set');
                $('#userAvatar img').prop('src', $('meta[name="avatar"]').attr('content'));
            }
            //if (isLoaded) {
            // code...
            App.gameInit();
            //}else{
            //}
        });
        PIXI.loader.on("progress", function (e) {
            var progressString = Math.floor(PIXI.loader.progress) + '%';
            $("#percent").html(progressString);
        });
    };
    App.gameInit = function () {
        Sfx.FnBgm();
        App.EventState = new LiteEvent();
        App.EventResize = new LiteEvent();
        App.EventUpdate = new LiteEvent();
        App.render = PIXI.autoDetectRenderer(App.screenWidth, App.screenHeight, {
            view: document.getElementById("game"),
            resolution: 2,
            autoResize: true,
            transparent: true
        });
        //PIXI.DOM.Setup(App.render, true);
        App.stage = new PIXI.Container();
        App.fitWindow();
        App.fnLoop();
        App.stage.addChild(Game.Instance);
        if (!App.isShared) {
            App.intro();
        }
        else {
        }
    };
    App.fitWindow = function () {
        App.render.resize(App.screenWidth, App.screenHeight);
        App.render.render(App.stage);
        App.height = App.screenHeight * App.width / App.screenWidth;
        App.ratio = App.stage.scale.y = App.stage.scale.x = App.screenWidth / App.width;
        // App.render.render(App.stage);
    };
    App.fnLoop = function () {
        var _this = this;
        window.requestAnimFrame(function () {
            App.render.render(_this.stage);
            var _now = Date.now();
            var _dt = _now - (App.time || _now);
            App.time = _now;
            App.EventUpdate.trigger(_dt);
            App.fnLoop();
        });
    };
    App.intro = function () {
        if (App.state === STATE.INTRO) {
            return;
        }
        App.state = STATE.LOADING;
        App.EventState.trigger(STATE.INTRO);
    };
    App.play = function () {
        if (App.state === STATE.PLAY) {
            return;
        }
        App.state = STATE.PLAY;
        App.EventState.trigger(STATE.PLAY);
    };
    App.over = function () {
        if (App.state === STATE.OVER) {
            return;
        }
        App.state = STATE.OVER;
        App.EventState.trigger(STATE.OVER);
    };
    App.mypage = function () {
        if (App.state === STATE.MYPAGE) {
            return;
        }
        App.state = STATE.MYPAGE;
        App.EventState.trigger(STATE.MYPAGE);
    };
    App.saveSupport = function (id) {
        $.ajax({
            type: 'GET',
            url: '/api/jins/support',
            data: {
                user_id: id,
                support_id: $('meta[name="user_id"]').attr('content'),
            },
            dataType: 'json',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="_token"]').attr('content')
            },
            success: function (data) {
                console.log('isshared response', data);
            },
            error: function (xhr, type) {
                console.log('ajax error');
            }
        });
    };
    App.getStatistics = function (id) {
        var _this = this;
        $.ajax({
            type: 'GET',
            url: '/api/jins/statistics',
            data: { user_id: id },
            dataType: 'json',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="_token"]').attr('content')
            },
            success: function (data) {
                console.log('statistics response', data);
                if (data.status) {
                    App.userBalloons = data.result;
                    App.userSupport = data.user_support_count;
                    App.userAvatar = data.userInfo.avatar;
                    App.userName = data.userInfo.nickname || 'Ta';
                    $('#userName').text(App.userName);
                    $('#userSupport').text(App.userSupport);
                    PIXI.loader.add('/' + App.userAvatar).load(function () {
                        App.mypage();
                    });
                }
            },
            error: function (xhr, type) {
                console.log('ajax error');
            }
        });
    };
    App.resetParams = function () {
        window.history.pushState({}, "cleanShare", window.location.href.split('?')[0]); //remove user_id from url.
        App.isShared = false;
        App.userBalloons = [];
        App.userSupport = 0;
        App.userAvatar = '';
        App.userName = '';
    };
    App.state = STATE.LOADING;
    App.width = 750;
    App.openWindows = [];
    App.isPrize = false;
    App.isFirst = false;
    App.isShared = false;
    App.userBalloons = [];
    App.userSupport = 0;
    App.userAvatar = '';
    App.userName = '';
    App.customBalloonText = '';
    App.customBalloon = 0;
    App.ratio = 1;
    return App;
})();
/// <reference path="App.ts" />
domready(function () {
    App.loadAssets();
});
