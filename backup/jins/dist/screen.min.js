/// <reference path="App.ts" />
var STATE;
(function (STATE) {
    STATE[STATE["LOADING"] = 0] = "LOADING";
    STATE[STATE["INTRO"] = 1] = "INTRO";
    STATE[STATE["PLAY"] = 2] = "PLAY";
    STATE[STATE["OVER"] = 3] = "OVER";
})(STATE || (STATE = {}));
window.requestAnimFrame = (function () {
    return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };
})();
var _hmt = _hmt || [];
(function () {
    var hm = document.createElement("script");
    hm.src = "//hm.baidu.com/hm.js?599b308e5d4c42189ba18f54397dd9ca";
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(hm, s);
})();
var config = {
    x: 0,
    y: 0,
    width: 1280,
    height: 720,
    isProjection: false
};
var sdata = {
    title: '一份脸红心跳的新年礼物，你敢打开吗？快来敲敲神秘女郎的窗户，看看她会给你送什么吧！',
    desc: '随我一起去拿礼物哦！',
    link: 'http://gineign.cn',
    imgUrl: 'http://gineign.cn/assets/jins/wechat.jpg',
    success: function () {
        //alert('用户确认分享后执行的回调函数');
        _hmt.push(["_trackEvent", "button", "click", "ShareSuccess"]);
    },
    cancel: function () {
        // alert('用户取消分享后执行的回调函数');
        _hmt.push(["_trackEvent", "button", "click", "ShareCancel"]);
    }
};
var LiteEvent = (function () {
    function LiteEvent() {
        this.handlers = [];
    }
    LiteEvent.prototype.on = function (handler) {
        this.handlers.push(handler);
    };
    LiteEvent.prototype.off = function (handler) {
        this.handlers = this.handlers.filter(function (h) { return h !== handler; });
    };
    LiteEvent.prototype.trigger = function (data) {
        if (this.handlers) {
            this.handlers.slice(0).forEach(function (h) { return h(data); });
        }
    };
    return LiteEvent;
})();
/// <reference path="../../App.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var play;
(function (play) {
    var City = (function (_super) {
        __extends(City, _super);
        function City() {
            _super.call(this, PIXI.Texture.fromFrame("city.png"));
            this.y = App.height - this.height;
        }
        Object.defineProperty(City, "Instance", {
            get: function () {
                if (!City._Instance) {
                    City._Instance = new City();
                }
                return City._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return City;
    })(PIXI.Sprite);
    play.City = City;
})(play || (play = {}));
/// <reference path="../Game.ts" />
var play;
(function (play) {
    var Logo = (function (_super) {
        __extends(Logo, _super);
        function Logo() {
            _super.call(this, PIXI.Texture.fromFrame("logo.png"));
            this.x = 100;
            this.y = 20;
        }
        Object.defineProperty(Logo, "Instance", {
            get: function () {
                if (!Logo._Instance) {
                    Logo._Instance = new Logo();
                }
                return Logo._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Logo;
    })(PIXI.Sprite);
    play.Logo = Logo;
})(play || (play = {}));
/// <reference path="Play.ts" />
var play;
(function (play) {
    var IntroMe = (function (_super) {
        __extends(IntroMe, _super);
        function IntroMe() {
            _super.call(this, PIXI.Texture.fromFrame("IntroMe.png"));
            this.x = 250;
            this.y = 400;
            this.alpha = 0;
            var _this = this;
            setTimeout(function () {
                _this.show();
            }, 1000);
        }
        Object.defineProperty(IntroMe, "Instance", {
            get: function () {
                if (!IntroMe._Instance) {
                    IntroMe._Instance = new IntroMe();
                }
                return IntroMe._Instance;
            },
            enumerable: true,
            configurable: true
        });
        IntroMe.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                y: 320
            });
        };
        IntroMe.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return IntroMe;
    })(PIXI.Sprite);
    play.IntroMe = IntroMe;
})(play || (play = {}));
/// <reference path="Play.ts" />
var play;
(function (play) {
    var IntroNew = (function (_super) {
        __extends(IntroNew, _super);
        function IntroNew(x, y, rotate) {
            _super.call(this, PIXI.Texture.fromFrame("IntroNew.png"));
            this.x = x;
            this.y = y;
            if (rotate) {
                this.rotation += 0.17;
            }
            this.alpha = 0;
            var _this = this;
            setTimeout(function () {
                _this.show();
            }, 1000);
        }
        IntroNew.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                x: this.x + 100
            });
        };
        IntroNew.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return IntroNew;
    })(PIXI.Sprite);
    play.IntroNew = IntroNew;
})(play || (play = {}));
/// <reference path="Play.ts" />
var play;
(function (play) {
    var IntroWish = (function (_super) {
        __extends(IntroWish, _super);
        function IntroWish() {
            _super.call(this, PIXI.Texture.fromFrame("IntroWish.png"));
            this.x = 250;
            this.y = 0;
            this.alpha = 0;
            var _this = this;
            setTimeout(function () {
                _this.show();
            }, 1000);
        }
        Object.defineProperty(IntroWish, "Instance", {
            get: function () {
                if (!IntroWish._Instance) {
                    IntroWish._Instance = new IntroWish();
                }
                return IntroWish._Instance;
            },
            enumerable: true,
            configurable: true
        });
        IntroWish.prototype.show = function () {
            var _this = this;
            TweenLite.to(this, 1, {
                alpha: 1,
                y: 460
            });
        };
        IntroWish.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 1, {
                y: -this.height
            });
        };
        return IntroWish;
    })(PIXI.Sprite);
    play.IntroWish = IntroWish;
})(play || (play = {}));
/// <reference path="IntroMe.ts" />
/// <reference path="IntroNew.ts" />
/// <reference path="IntroWish.ts" />
var play;
(function (play) {
    var IntroTextHolder = (function (_super) {
        __extends(IntroTextHolder, _super);
        function IntroTextHolder() {
            _super.call(this);
            var _this = this;
            this.addChild(new play.IntroNew(0, 250, false));
            this.addChild(play.IntroMe.Instance);
            this.addChild(new play.IntroNew(0, 380, true));
            this.addChild(play.IntroWish.Instance);
        }
        Object.defineProperty(IntroTextHolder, "Instance", {
            get: function () {
                if (!IntroTextHolder._Instance) {
                    IntroTextHolder._Instance = new IntroTextHolder();
                }
                return IntroTextHolder._Instance;
            },
            enumerable: true,
            configurable: true
        });
        IntroTextHolder.duration = 8;
        return IntroTextHolder;
    })(PIXI.Container);
    play.IntroTextHolder = IntroTextHolder;
})(play || (play = {}));
/// <reference path="Play.ts" />
var play;
(function (play) {
    var WishText = (function (_super) {
        __extends(WishText, _super);
        function WishText(text) {
            if (text === void 0) { text = ''; }
            var _this = this;
            _super.call(this, text, { align: 'center', lineHeight: 58, font: "bold 45px Arial" });
            this.x = 170 - 130;
            this.y = 200;
            // console.log(this.width);
            // console.log(this.wordWrap(text));
            this.text = this.processText();
            // console.log(this.text);
            // this.updatePosition(text);
            this.updatePosition();
            // this.y = 250;
            // this.x = -110;
        }
        WishText.prototype.processText = function () {
            // console.log(this.width);
            // console.log(WishText.textWidth);
            if (this.width > WishText.textWidth) {
                // code...
                var result = ' ';
                var i = 0;
                var j = 5;
                var temp;
                var text = this.text;
                while (true) {
                    result = result + text.slice(i, j) + '\n ';
                    i = j;
                    temp = j + 5;
                    if (text[temp]) {
                        j = temp;
                    }
                    else {
                        j = text.length;
                        result = result + text.slice(i, j) + '\n ';
                        break;
                    }
                }
                return result;
            }
            return this.text;
        };
        WishText.prototype.updatePosition = function () {
            //console.log('wishtext', this.width, this.height);
            if (this.height < 60) {
                // code...
                this.y += 75;
            }
            else if (this.height < 180) {
                // code...
                this.y += 35;
            }
            else if (this.height < 240) {
                // code...
                this.y += 15;
            }
        };
        WishText.textWidth = 240;
        return WishText;
    })(PIXI.Text);
    play.WishText = WishText;
})(play || (play = {}));
/// <reference path="Play.ts" />
var play;
(function (play) {
    var WishTextContainer = (function (_super) {
        __extends(WishTextContainer, _super);
        function WishTextContainer(id) {
            if (id === void 0) { id = 1; }
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame('WishText.png'));
            this.scale.x = this.scale.y = 0.68;
            this.y = 250;
            this.x = -10;
        }
        Object.defineProperty(WishTextContainer, "Instance", {
            get: function () {
                if (!WishTextContainer._Instance) {
                    WishTextContainer._Instance = new WishTextContainer();
                }
                return WishTextContainer._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return WishTextContainer;
    })(PIXI.Sprite);
    play.WishTextContainer = WishTextContainer;
})(play || (play = {}));
/// <reference path="../Game.ts" />
var play;
(function (play) {
    var Avatar = (function (_super) {
        __extends(Avatar, _super);
        function Avatar(avatar) {
            _super.call(this, PIXI.Texture.fromImage('/' + avatar));
            // this.width = 200
            // this.height = 200;
            var mask = new PIXI.Graphics();
            // console.log('----', this.x, this.y, this.width / 2);
            mask.beginFill(0);
            mask.drawCircle(this.width / 2, this.width / 2, this.width / 2);
            mask.endFill;
            // mask.pivot.x = this.width / 2
            // mask.pivot.y = this.height / 2
            this.addChild(mask);
            this.mask = mask;
            this.width = 150;
            this.height = 150;
            this.x = 100;
            this.y = 220;
        }
        return Avatar;
    })(PIXI.Sprite);
    play.Avatar = Avatar;
})(play || (play = {}));
/// <reference path="Play.ts" />
/// <reference path="WishText.ts" />
/// <reference path="WishTextContainer.ts" />
/// <reference path="Avatar.ts" />
var play;
(function (play) {
    var Balloon = (function (_super) {
        __extends(Balloon, _super);
        function Balloon(id) {
            _super.call(this, PIXI.Texture.fromFrame("balloon" + id + ".png"));
            this.y = App.height;
            this.scale.x = 0.2;
            this.scale.y = 0.2;
            this.init();
            // this.visible = false;
        }
        Balloon.prototype.init = function () {
            // console.log('balloon', App.count % 9, App.count % 9 % 2);
            this.tag = App.count % Balloon.maxCount;
            this.x = App.width / 10 * (this.tag) + App.width / 10 * 2;
            var _this = this;
            this.time = Math.random() * 3000;
            var toY = 50 * (Math.random() + 1);
            if (this.tag % 2 == 1) {
                toY = 50 * (Math.random() + 1) + 200;
            }
            TweenMax.to(_this, 15, {
                y: toY,
                onComplete: function () {
                    _this.animate();
                }
            });
            TweenMax.to(_this.scale, 8, {
                x: Balloon.scale,
                y: Balloon.scale
            });
        };
        Balloon.prototype.animate = function () {
            var _this = this;
            var toX = (Math.random() - 0.5) * 100 + App.width / 10 * (this.tag) + App.width / 10 * 2;
            var toY = 50 * (Math.random() + 1) + 200 * (this.tag % 2);
            TweenMax.to(this, 10, {
                x: toX,
                y: toY,
                onComplete: function () {
                    _this.animate();
                }
            });
        };
        Balloon.prototype.addMessage = function (data) {
            var wish = new play.WishTextContainer();
            wish.addChild(new play.WishText(data.message));
            this.addChild(wish);
            this.addChild(new play.Avatar(data.avatar));
        };
        Balloon.maxCount = 7;
        Balloon.scale = 0.45;
        return Balloon;
    })(PIXI.Sprite);
    play.Balloon = Balloon;
})(play || (play = {}));
/// <reference path="Play.ts" />
var play;
(function (play) {
    var LuckyBalloon = (function (_super) {
        __extends(LuckyBalloon, _super);
        function LuckyBalloon() {
            App.luckyCount++;
            this.id = Math.round((Math.random() * 4) + 1);
            // console.log(this.id);
            var textures = [];
            var i = 0;
            textures.push(PIXI.Texture.fromFrame("lucky" + this.id + ".png"));
            while (++i <= 5) {
                textures.push(PIXI.Texture.fromFrame("Explosion" + i + ".png"));
            }
            _super.call(this, textures);
            this.x = App.width / 10 * (App.luckyCount % 10);
            this.y = App.height;
            this.animationSpeed = 0.1;
            this.scale.x = this.scale.y = 0.2;
            this.init();
            this.loop = false;
            var _this = this;
            this.onComplete = function () {
                _this.parent.removeChild(_this);
            };
        }
        LuckyBalloon.prototype.init = function () {
            var _this = this;
            var duration = Math.random() * 5000;
            setTimeout(function () {
                TweenMax.to(_this, 15, {
                    y: 200 * (Math.random() + 1),
                    onComplete: function () {
                        _this.animate();
                    }
                });
            }, duration);
            var scale = 0.4;
            setTimeout(function () {
                TweenMax.to(_this.scale, 8, {
                    x: scale,
                    y: scale
                });
            }, duration + 2000);
        };
        LuckyBalloon.prototype.animate = function () {
            var _this = this;
            TweenMax.to(this, 5, {
                x: (Math.random() - 0.5) * 100 + _this.x,
                y: (Math.random() - 0.5) * 100 + _this.y,
                onComplete: function () {
                    _this.animate();
                }
            });
        };
        LuckyBalloon.prototype.expolde = function () {
            this.play();
        };
        return LuckyBalloon;
    })(PIXI.extras.MovieClip);
    play.LuckyBalloon = LuckyBalloon;
})(play || (play = {}));
/// <reference path="Play" />
/// <reference path="Balloon" />
/// <reference path="LuckyBalloon" />
var play;
(function (play) {
    var BalloonContainer = (function (_super) {
        __extends(BalloonContainer, _super);
        function BalloonContainer() {
            var _this = this;
            _super.call(this);
            this.baloonInit();
        }
        Object.defineProperty(BalloonContainer, "Instance", {
            get: function () {
                if (!BalloonContainer._Instance) {
                    BalloonContainer._Instance = new BalloonContainer();
                }
                return BalloonContainer._Instance;
            },
            enumerable: true,
            configurable: true
        });
        BalloonContainer.prototype.baloonInit = function () {
            var _this = this;
            // for (var i = 1; i < 6; ++i) {
            // 	_this.addChild(new Balloon(i));
            // }
            // for (var i = 0; i < 10; ++i) {
            // 	setTimeout(function() {
            // 		_this.addChildAt(new LuckyBalloon(), 0);
            // 	}, i * 1000);
            // }
        };
        BalloonContainer.prototype.shoot = function (data) {
            this.clean();
            var _this = this;
            var name = 'balloon' + App.count % play.Balloon.maxCount;
            // console.log(name);
            var original = this.getChildByName(name);
            // console.log(original);
            if (original) {
                // code...
                TweenMax.to(original, 5, {
                    y: original.y - App.height,
                    onComplete: function () {
                        _this.removeChild(original);
                    }
                });
                this.fire(data, name);
            }
            else {
                this.fire(data, name);
            }
        };
        BalloonContainer.prototype.fire = function (data, name) {
            var balloon = new play.Balloon(data.balloon_id);
            setTimeout(function () {
                balloon.name = name;
            }, 1000);
            // balloon.x = balloon.x - 50;
            balloon.addMessage(data);
            this.addChild(balloon);
            App.count++;
        };
        BalloonContainer.prototype.clean = function () {
            if (this.children.length > 10) {
                this.removeChildAt(0);
            }
        };
        return BalloonContainer;
    })(PIXI.Container);
    play.BalloonContainer = BalloonContainer;
})(play || (play = {}));
/// <reference path="../Game.ts" />
var play;
(function (play) {
    var Qrcode = (function (_super) {
        __extends(Qrcode, _super);
        function Qrcode() {
            _super.call(this, PIXI.Texture.fromImage("/assets/jins/qrcode.png"));
            this.x = 50;
            this.y = App.height - this.height - 20;
        }
        Object.defineProperty(Qrcode, "Instance", {
            get: function () {
                if (!Qrcode._Instance) {
                    Qrcode._Instance = new Qrcode();
                }
                return Qrcode._Instance;
            },
            enumerable: true,
            configurable: true
        });
        return Qrcode;
    })(PIXI.Sprite);
    play.Qrcode = Qrcode;
})(play || (play = {}));
/// <reference path="../Game.ts" />
/// <reference path="City.ts" />
/// <reference path="Logo.ts" />
/// <reference path="IntroTextHolder.ts" />
/// <reference path="BalloonContainer.ts" />
/// <reference path="Qrcode.ts" />
var play;
(function (play) {
    var Play = (function (_super) {
        __extends(Play, _super);
        function Play() {
            var _this = this;
            _super.call(this);
            this.playInit();
            App.EventState.on(function (aState) {
                switch (aState) {
                    case STATE.PLAY:
                        _this.show();
                        break;
                    case STATE.OVER:
                        _this.hide();
                        break;
                }
            });
        }
        Object.defineProperty(Play, "Instance", {
            get: function () {
                if (!Play._Instance) {
                    Play._Instance = new Play();
                }
                return Play._Instance;
            },
            enumerable: true,
            configurable: true
        });
        Play.prototype.show = function () {
            this.visible = true;
        };
        Play.prototype.hide = function () {
            this.visible = false;
        };
        Play.prototype.playInit = function () {
            this.addChild(play.LuckyContainer.Instance);
            this.addChild(play.BalloonContainer.Instance);
            if (!config.isProjection) {
                this.addChild(play.IntroTextHolder.Instance);
                this.addChild(play.City.Instance);
                this.addChild(play.Logo.Instance);
                this.addChild(play.Qrcode.Instance);
            }
        };
        Play.prototype.shoot = function (data) {
            var avatar = '/' + data.avatar;
            if (isInArray(avatar, App.resources)) {
                play.BalloonContainer.Instance.shoot(data);
            }
            else {
                PIXI.loader.add('/' + data.avatar).load(function () {
                    App.resources.push(avatar);
                    play.BalloonContainer.Instance.shoot(data);
                });
            }
        };
        Play.prototype.explode = function (data) {
            console.log(data);
            play.LuckyContainer.Instance.explode(data);
        };
        return Play;
    })(PIXI.Container);
    play.Play = Play;
})(play || (play = {}));
/// <reference path="../App.ts" />
/// <reference path="play/Play.ts" />
var Game = (function (_super) {
    __extends(Game, _super);
    function Game() {
        _super.call(this);
        this.gameInit();
    }
    Object.defineProperty(Game, "Instance", {
        get: function () {
            if (!Game._Instance) {
                Game._Instance = new Game();
            }
            return Game._Instance;
        },
        enumerable: true,
        configurable: true
    });
    Game.prototype.gameInit = function () {
        this.addChild(play.Play.Instance);
        // this.addChild(intro.Intro.Instance);
        // this.addChild(over.Over.Instance);
    };
    return Game;
})(PIXI.Container);
/// <reference path="../App.ts" />
var Sfx = (function () {
    function Sfx() {
    }
    Sfx.FnBgm = function () {
        if (!createjs.Sound.initializeDefaultPlugins()) {
            return;
        }
        var audioPath = "/assets/jins/";
        var sounds = [
            { id: "Music", src: "bgm.mp3" }
        ];
        createjs.Sound.alternateExtensions = ["ogg"];
        createjs.Sound.addEventListener("fileload", Sfx.FnPlayBgm);
        createjs.Sound.registerSounds(sounds, audioPath);
    };
    Sfx.FnPlayBgm = function () {
        createjs.Sound.play("Music", createjs.Sound.INTERRUPT_ANY);
        // vazee.control.Music.Instance.fnActive();
        //       if (musicOn) {
        //           createjs.Sound.play("Music", createjs.Sound.INTERRUPT_ANY, 0, 0, -1, .1);
        //       }
        //       else {
        //           vazee.control.Music.Instance.musicOn = false;
        //       }
    };
    return Sfx;
})();
var service;
(function (service) {
    var Util = (function () {
        function Util() {
        }
        Util.validatePhone = function (phone) {
            var myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
            if (!myreg.test(phone)) {
                return false;
            }
            return true;
        };
        Util.getQueryVariable = function (variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) {
                    return pair[1];
                }
            }
            return '';
        };
        return Util;
    })();
    service.Util = Util;
})(service || (service = {}));
function isInArray(value, array) {
    return array.indexOf(value) > -1;
}
/// <reference path="../typings/tsd.d.ts" />
/// <reference path="config.ts" />
/// <reference path="service/LiteEvent.ts" />
/// <reference path="game/Game.ts" />
/// <reference path="service/Sfx.ts" />
/// <reference path="service/Util.ts" />
var App = (function () {
    function App() {
    }
    App.loadAssets = function () {
        config.isProjection = service.Util.getQueryVariable('isProjection') ? true : false;
        if (config.isProjection) {
            // code...
            App.width = 1024;
        }
        App.screenWidth = (document.documentElement.clientWidth || App.width);
        App.screenHeight = (document.documentElement.clientHeight || App.height);
        config.x = parseInt(service.Util.getQueryVariable('x')) || 0;
        config.y = parseInt(service.Util.getQueryVariable('y')) || 0;
        config.width = parseInt(service.Util.getQueryVariable('width')) || App.screenWidth;
        config.height = parseInt(service.Util.getQueryVariable('height')) || App.screenHeight;
        console.log('config', config);
        App.adjustCanvas();
        var _list = [
            "/assets/jins/screen.png",
            "/assets/jins/screen.json",
            "/assets/jins/qrcode.png"
        ];
        var _this = this;
        PIXI.loader.add(_list).load(function () {
            $("#loader").addClass('hide');
            $("#logo").addClass('hide');
            $("#game").show();
            App.gameInit();
        });
        PIXI.loader.on("progress", function (e) {
            var progress = Math.floor(PIXI.loader.progress);
            var progressString = progress.toString() + '%';
            $("#percent").html(progressString);
            var targetLight = Math.floor(progress / 16.66);
            var i = 1;
            while (++i < targetLight + 1) {
                $('.dotBarInner .dot-' + i + ' .on').css('display', 'block');
                $('.dotBarInner .dot-' + i + ' .off').css('display', 'none');
            }
        });
    };
    App.gameInit = function () {
        Sfx.FnBgm();
        App.EventState = new LiteEvent();
        App.EventResize = new LiteEvent();
        App.EventUpdate = new LiteEvent();
        App.render = PIXI.autoDetectRenderer(config.width, config.height, {
            view: document.getElementById("game"),
            resolution: 2,
            autoResize: true,
            backgroundColor: 0xFFFFFF
        });
        //PIXI.DOM.Setup(App.render, true);
        App.stage = new PIXI.Container();
        App.fitWindow();
        App.fnLoop();
        App.stage.addChild(Game.Instance);
        App.play();
    };
    App.adjustCanvas = function () {
        if (config.isProjection) {
            $('#game').css({
                'position': 'absolute',
                'left': config.x,
                'top': config.y
            });
        }
    };
    App.resize = function () {
        if (App.ToResize) {
            clearTimeout(App.ToResize);
        }
        App.ToResize = setTimeout(App.fitWindow, 300);
    };
    App.fitWindow = function () {
        // console.log('fit window');
        App.render.resize(config.width, config.height);
        App.render.render(App.stage);
        App.height = config.height * App.width / config.width;
        App.ratio = App.stage.scale.x = App.stage.scale.y = config.width / App.width;
        // App.render.render(App.stage);
    };
    App.fnLoop = function () {
        var _this = this;
        window.requestAnimFrame(function () {
            App.render.render(_this.stage);
            var _now = Date.now();
            var _dt = _now - (App.time || _now);
            App.time = _now;
            App.EventUpdate.trigger(_dt);
            App.fnLoop();
        });
    };
    App.intro = function () {
        if (App.state === STATE.INTRO) {
            return;
        }
        App.state = STATE.LOADING;
        App.EventState.trigger(STATE.INTRO);
    };
    App.play = function () {
        if (App.state === STATE.PLAY) {
            return;
        }
        App.state = STATE.PLAY;
        App.EventState.trigger(STATE.PLAY);
    };
    App.over = function () {
        console.log('over---');
        if (App.state === STATE.OVER) {
            return;
        }
        App.state = STATE.OVER;
        App.EventState.trigger(STATE.OVER);
    };
    App.state = STATE.LOADING;
    App.width = 1280;
    App.openWindows = [];
    App.resources = [];
    App.count = 0;
    App.luckyCount = 0;
    return App;
})();
/// <reference path="App.ts" />
domready(function () {
    $(window).on("resize orientationchange", App.resize);
    App.loadAssets();
});
/// <reference path="Play" />
/// <reference path="Balloon" />
/// <reference path="LuckyBalloon" />
var play;
(function (play) {
    var LuckyContainer = (function (_super) {
        __extends(LuckyContainer, _super);
        function LuckyContainer() {
            var _this = this;
            _super.call(this);
            this.baloonInit();
        }
        Object.defineProperty(LuckyContainer, "Instance", {
            get: function () {
                if (!LuckyContainer._Instance) {
                    LuckyContainer._Instance = new LuckyContainer();
                }
                return LuckyContainer._Instance;
            },
            enumerable: true,
            configurable: true
        });
        LuckyContainer.prototype.baloonInit = function () {
            var _this = this;
            // for (var i = 1; i < 6; ++i) {
            // 	_this.addChild(new Balloon(i));
            // }
            for (var i = 1; i <= 10; ++i) {
                setTimeout(function () {
                    var lucky = new play.LuckyBalloon();
                    _this.addChild(lucky);
                }, i * 1000);
            }
        };
        LuckyContainer.prototype.explode = function (data) {
            var _this = this;
            if (this.children.length < 10) {
                // code...
                setTimeout(function () {
                    var lucky = new play.LuckyBalloon();
                    _this.addChild(lucky);
                }, 1000);
            }
            var lucky = this.getChildAt(0);
            lucky.expolde();
        };
        return LuckyContainer;
    })(PIXI.Container);
    play.LuckyContainer = LuckyContainer;
})(play || (play = {}));
/// <reference path="../../App.ts" />
var intro;
(function (intro) {
    var MusicBtn = (function (_super) {
        __extends(MusicBtn, _super);
        function MusicBtn() {
            var _this = this;
            _super.call(this, PIXI.Texture.fromFrame("Music.png"));
            this.x = App.width - this.width - 20;
            this.y = 10;
            this.musicOn = true;
            this.buttonMode = this.interactive = true;
            this.on("click", this.fnTap).on("tap", this.fnTap);
        }
        Object.defineProperty(MusicBtn, "Instance", {
            get: function () {
                if (!MusicBtn._Instance) {
                    MusicBtn._Instance = new MusicBtn();
                }
                return MusicBtn._Instance;
            },
            enumerable: true,
            configurable: true
        });
        MusicBtn.prototype.fnActive = function () {
            this.visible = true;
            if (!this.interactive) {
                this.buttonMode = this.interactive = true;
                this.on("click", this.fnTap).on("tap", this.fnTap);
            }
        };
        MusicBtn.prototype.fnTap = function () {
            this.musicOn = !this.musicOn;
            if (this.musicOn) {
                createjs.Sound.play("Music", createjs.Sound.INTERRUPT_ANY);
            }
            else {
                createjs.Sound.stop();
            }
        };
        MusicBtn.prototype.animate = function () {
            TweenMax.to(this, 0.5, {
                x: App.width
            });
        };
        return MusicBtn;
    })(PIXI.Sprite);
    intro.MusicBtn = MusicBtn;
})(intro || (intro = {}));
